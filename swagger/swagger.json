{
  "swagger": "2.0",
  "info": {
    "description": "Many features of the CloudView are available through REST APIs. <br/>Access support information at <a href=\"https://www.qualys.com/support/\" target=\"_blank\">www.qualys.com/support</a>. <br/><br/><b>Permissions:</b> <br/>User must have the CloudView module enabled and api access permission.",
    "title": "CloudView APIs",
    "contact": {
      "name": "dev-cloudview@qualys.com"
    },
    "version": ""
  },
  "host": "qualysguard.qg2.apps.qualys.com",
  "basePath": "/cloudview-api",
  "tags": [
    {
      "name": "AWS Connector",
      "description": "API's for the AWS Connectors"
    },
    {
      "name": "AWS Evaluations",
      "description": "API's for the AWS Control Evaluations"
    },
    {
      "name": "Assessment Reports",
      "description": "API's for the Assessment Report"
    },
    {
      "name": "Azure Connector",
      "description": "API's for the Azure Connectors"
    },
    {
      "name": "Azure Evaluations",
      "description": "API's for the Azure Control Evaluations"
    },
    {
      "name": "Connector Groups Management",
      "description": "API's for managing Connector Groups"
    },
    {
      "name": "GCP Connector",
      "description": "API's for the GCP Connectors"
    },
    {
      "name": "GCP Evaluations",
      "description": "API's for the GCP Control Evaluations"
    },
    {
      "name": "Remediation Activity",
      "description": "API's for Remediation"
    },
    {
      "name": "Reports",
      "description": "API's for the Reports"
    },
    {
      "name": "Response Actions",
      "description": "API's for Response Actions (Beta Version)"
    },
    {
      "name": "Response Notifications",
      "description": "API's for Response Notifications (Beta Version)"
    },
    {
      "name": "Response Rules",
      "description": "API's for Response Rules (Beta Version)"
    },
    {
      "name": "User Access Management",
      "description": "API's for managing User Access"
    }
  ],
  "paths": {
    "/rest/v1/actions": {
      "get": {
        "tags": [
          "Response Actions"
        ],
        "summary": "Get actions",
        "operationId": "getAllActionsByFilterUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter the Actions list by providing a query using Qualys syntax. ",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "pageNo",
            "in": "query",
            "description": "The page to be returned.",
            "required": true,
            "type": "integer",
            "default": 0,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records per page to be included in the response.",
            "required": true,
            "type": "integer",
            "default": 50,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "Sort the results based on field name ",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "SortOrder",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionResponse"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/actions/delete": {
      "post": {
        "tags": [
          "Response Actions"
        ],
        "summary": "Delete existing action",
        "operationId": "deleteActionUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "actionIds",
            "description": "Specify the IDs of the actions to be deleted.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BulkIdParam"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/actions/email": {
      "post": {
        "tags": [
          "Response Actions"
        ],
        "summary": "Create a new email action",
        "operationId": "createEmailActionUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "emailActionRequest",
            "description": "emailActionRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmailActionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseEntity"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/actions/email/{emailActionId}": {
      "put": {
        "tags": [
          "Response Actions"
        ],
        "summary": "Update email action",
        "operationId": "updateEmailActionUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "emailActionId",
            "in": "path",
            "description": "Specify the Email ID of a specific action in the userâ€™s scope.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "emailActionUpdateRequest",
            "description": "emailActionUpdateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmailActionUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseEntity"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/actions/pagerduty": {
      "post": {
        "tags": [
          "Response Actions"
        ],
        "summary": "Create a new pagerDuty action",
        "operationId": "createPagerActionUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "pagerdutyRequest",
            "description": "pagerdutyRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PagerdutyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseEntity"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/actions/pagerduty/test": {
      "post": {
        "tags": [
          "Response Actions"
        ],
        "summary": "Test pagerDuty action",
        "operationId": "testSlackActionUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "pagerdutyConnectionParam",
            "description": "pagerdutyConnectionParam",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PagerdutyConnectionParam"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagerdutyConnectionParam"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/actions/pagerduty/{pagerActionId}": {
      "put": {
        "tags": [
          "Response Actions"
        ],
        "summary": "Update pagerDuty action",
        "operationId": "updatePagerActionUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "pagerActionId",
            "in": "path",
            "description": "Specify the pagerAction ID of a specific action in the userâ€™s scope.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "pagerdutyUpdateRequest",
            "description": "pagerdutyUpdateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PagerdutyUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseEntity"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/actions/slack": {
      "post": {
        "tags": [
          "Response Actions"
        ],
        "summary": "Create a new Slack action",
        "operationId": "createSlackActionUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "slackRequest",
            "description": "slackRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SlackRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseEntity"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/actions/slack/test": {
      "post": {
        "tags": [
          "Response Actions"
        ],
        "summary": "Test Slack action",
        "operationId": "testSlackActionUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "slackConnectionParam",
            "description": "slackConnectionParam",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SlackConnectionParam"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SlackConnectionParam"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/actions/slack/{slackActionId}": {
      "put": {
        "tags": [
          "Response Actions"
        ],
        "summary": "Update Slack action",
        "operationId": "updateSlackActionUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "slackActionId",
            "in": "path",
            "description": "Specify the slackAction ID of a specific action in the userâ€™s scope.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "slackUpdateRequest",
            "description": "slackUpdateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SlackUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseEntity"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/actions/types": {
      "get": {
        "tags": [
          "Response Actions"
        ],
        "summary": "Get all the possible action types",
        "operationId": "getActionsTypesUsingGET",
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/actions/{actionId}": {
      "get": {
        "tags": [
          "Response Actions"
        ],
        "summary": "Get action by Id",
        "operationId": "getActionByIdUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Specify the action ID of a specific action in the userâ€™s scope.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ActionResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/activities": {
      "get": {
        "tags": [
          "Response Notifications"
        ],
        "summary": "Get activities",
        "operationId": "getAllNotificationsUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "cloudType",
            "in": "query",
            "description": "Cloud Type",
            "required": true,
            "type": "string",
            "allowEmptyValue": false,
            "enum": [
              "AWS",
              "AZURE",
              "GCP"
            ]
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter the Activities list by providing a query using Qualys syntax. ",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "pageNo",
            "in": "query",
            "description": "The page to be returned.",
            "required": true,
            "type": "integer",
            "default": 0,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records per page to be included in the response.",
            "required": true,
            "type": "integer",
            "default": 50,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "Sort the results based on field name ",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "SortOrder",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AlertResponse"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/activities/{activityId}": {
      "get": {
        "tags": [
          "Response Notifications"
        ],
        "summary": "Get activity by Id",
        "operationId": "getNotificationByIdUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "activityId",
            "in": "path",
            "description": "Specify the activity ID of a specific alert in the userâ€™s scope.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AlertResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/aws/connectors": {
      "get": {
        "tags": [
          "AWS Connector"
        ],
        "summary": "Get the list of connectors",
        "operationId": "getListUsingGET_1",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter the list of connectors using Qualys syntax.",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "pageNo",
            "in": "query",
            "description": "The page to be returned.",
            "required": true,
            "type": "integer",
            "default": 0,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records per page to be included in the response.",
            "required": true,
            "type": "integer",
            "default": 50,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the results using a Qualys token. For example lastSyncedOn:desc.",
            "required": false,
            "type": "string",
            "default": "lastSyncedOn:desc",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageImplÂ«AwsConnectorResponseÂ»"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      },
      "post": {
        "tags": [
          "AWS Connector"
        ],
        "summary": "Create a new connector",
        "operationId": "createUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "connectorBody",
            "description": "<a href=\"/cloudview/help/index.htm#t=connector%2Faws_v1%2Fconfigure_aws_connectors.htm\" target=\"_blank\">Click here</a> to know more about parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AwsConnectorCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AwsConnectorResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      },
      "delete": {
        "tags": [
          "AWS Connector"
        ],
        "summary": "Delete the provided connectors",
        "operationId": "deleteConnectorsUsingDELETE_1",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "connectorIds",
            "description": "Specify the IDs of the connectors to be deleted.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/aws/connectors/aws/download": {
      "get": {
        "tags": [
          "AWS Connector"
        ],
        "summary": "Download the AWS cloud formation template",
        "operationId": "downloadAwsCloudFormationTemplateUsingGET",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "awsCloudType",
            "in": "query",
            "description": "Aws Cloud type used for generating the template for particular Cloud.",
            "required": true,
            "type": "string",
            "allowEmptyValue": false,
            "enum": [
              "Gov",
              "China",
              "Global"
            ]
          },
          {
            "name": "externalId",
            "in": "query",
            "description": "External Id to be used for generating the template.",
            "required": true,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/aws/connectors/awsBaseAccountId": {
      "get": {
        "tags": [
          "AWS Connector"
        ],
        "summary": "Get the aws base account Id ",
        "operationId": "getAwsAccountIdUsingGET",
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/aws/connectors/connectors/disable": {
      "patch": {
        "tags": [
          "AWS Connector"
        ],
        "summary": "Disable the provided connectors",
        "operationId": "disableConnectorsUsingPATCH_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "connectorIds",
            "description": "Specify the IDs of the connectors to be disabled.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AckRequest"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/aws/connectors/connectors/enable": {
      "patch": {
        "tags": [
          "AWS Connector"
        ],
        "summary": "Enable the provided connectors",
        "operationId": "enableConnectorsUsingPATCH_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "connectorIds",
            "description": "Specify the IDs of the connectors to be enabled.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AckRequest"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/aws/connectors/run": {
      "post": {
        "tags": [
          "AWS Connector"
        ],
        "summary": "Run the provided connectors",
        "operationId": "runConnectorUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "connectorIds",
            "description": "Specify the IDs of the connectors that you want to execute/run.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/aws/connectors/{connectorId}": {
      "get": {
        "tags": [
          "AWS Connector"
        ],
        "summary": "Get the details of connector",
        "operationId": "getDetailsUsingGET_1",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "connectorId",
            "in": "path",
            "description": "Specify the connector ID of a specific connector in the userâ€™s scope.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AwsConnectorResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      },
      "put": {
        "tags": [
          "AWS Connector"
        ],
        "summary": "Update the existing connector",
        "operationId": "updateConnectorUsingPUT_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "connectorBody",
            "description": "<a href=\"/cloudview/help/index.htm#t=connector%2Faws_v1%2Fconfigure_aws_connectors.htm\" target=\"_blank\">Click here</a> to know more about parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConnectorUpdateRequest"
            }
          },
          {
            "name": "connectorId",
            "in": "path",
            "description": "Specify the connector ID of a specific connector in the userâ€™s scope.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AwsConnectorResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/aws/connectors/{connectorId}/errors": {
      "get": {
        "tags": [
          "AWS Connector"
        ],
        "summary": "Get the list of errors encountered when executing AWS connector",
        "operationId": "getErrorsListUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "connectorId",
            "in": "path",
            "description": "Specify the connector ID of a specific connector in the userâ€™s scope.",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageNo",
            "in": "query",
            "description": "The page to be returned.",
            "required": true,
            "type": "integer",
            "default": 0,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records per page to be included in the response.",
            "required": true,
            "type": "integer",
            "default": 50,
            "format": "int32",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageImplÂ«AwsConnectorErrorResponseÂ»"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/aws/evaluations/stats/{controlId}/{connectorId}": {
      "get": {
        "tags": [
          "AWS Evaluations"
        ],
        "summary": "Get the stats for specified control id and resource id",
        "operationId": "getEvaluationsStatsUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "connectorId",
            "in": "path",
            "description": "connectorId",
            "required": true,
            "type": "string"
          },
          {
            "name": "controlId",
            "in": "path",
            "description": "controlId",
            "required": true,
            "type": "string"
          },
          {
            "name": "resourceId",
            "in": "query",
            "description": "resourceId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EvaluationDates"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/aws/evaluations/{accountId}": {
      "get": {
        "tags": [
          "AWS Evaluations"
        ],
        "summary": "Get the list of evaluations as per the account for AWS Controls",
        "operationId": "getEvaluatedControlsUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Specify the ID of a specific account in the userâ€™s scope.",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter the resources list by providing a query using Qualys syntax. <a href=\"/cloudview/help/search_tips/search_ui_evaluations.htm\" target=\"_blank\">Click here</a> for help with creating your query.",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "pageNo",
            "in": "query",
            "description": "The page to be returned.",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records per page to be included in the response.",
            "required": false,
            "type": "integer",
            "default": 300,
            "format": "int32",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageImplÂ«AwsEvaluationSummaryListResponseÂ»"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/aws/evaluations/{accountId}/resources/{controlId}": {
      "get": {
        "tags": [
          "AWS Evaluations"
        ],
        "summary": "Get the resources evaluated for the specified aws account and control id",
        "operationId": "getEvaluatedResourcesUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Specify the ID of a specific account in the userâ€™s scope.",
            "required": true,
            "type": "string"
          },
          {
            "name": "controlId",
            "in": "path",
            "description": "Specify the control ID of a control for which resources evaluated need to be fetched",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter the resources list by providing a query using Qualys syntax. <a href=\"/cloudview/help/search_tips/search_ui_evaluations.htm\" target=\"_blank\">Click here</a> for help with creating your query.",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "pageNo",
            "in": "query",
            "description": "The page to be returned.",
            "required": true,
            "type": "integer",
            "default": 0,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records per page to be included in the response.",
            "required": true,
            "type": "integer",
            "default": 50,
            "format": "int32",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageImplÂ«AwsEvaluationDetailResponseÂ»"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/azure/connectors": {
      "get": {
        "tags": [
          "Azure Connector"
        ],
        "summary": "Get the list of connectors",
        "operationId": "getListUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter the list of connectors using Qualys syntax.",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "pageNo",
            "in": "query",
            "description": "The page to be returned.",
            "required": true,
            "type": "integer",
            "default": 0,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records per page to be included in the response.",
            "required": true,
            "type": "integer",
            "default": 50,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the results using a Qualys token. For example lastSyncedOn:desc.",
            "required": false,
            "type": "string",
            "default": "lastSyncedOn:desc",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageImplÂ«AzureConnectorResponseÂ»"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      },
      "post": {
        "tags": [
          "Azure Connector"
        ],
        "summary": "Create a new connector",
        "operationId": "createUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "connectorBody",
            "description": "<a href=\"/cloudview/help/index.htm#t=connector%2Fazure_v1%2Fconfigure_azure_connectors.htm\" target=\"_blank\">Click here</a> to know more about parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AzureConnectorCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AzureConnectorResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Azure Connector"
        ],
        "summary": "Delete the provided connectors",
        "operationId": "deleteConnectorsUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "connectorIds",
            "description": "Specify the IDs of the connectors to be deleted.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/azure/connectors/connectors/disable": {
      "patch": {
        "tags": [
          "Azure Connector"
        ],
        "summary": "Disable the provided connectors",
        "operationId": "disableConnectorsUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "connectorIds",
            "description": "Specify the IDs of the connectors to be disabled.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AckRequest"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/azure/connectors/connectors/enable": {
      "patch": {
        "tags": [
          "Azure Connector"
        ],
        "summary": "Enable the provided connectors",
        "operationId": "enableConnectorsUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "connectorIds",
            "description": "Specify the IDs of the connectors to be enabled.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AckRequest"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/azure/connectors/run": {
      "post": {
        "tags": [
          "Azure Connector"
        ],
        "summary": "Run the provided connectors",
        "operationId": "runConnectorUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "connectorIds",
            "description": "Specify the IDs of the connectors that you want to execute/run.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/azure/connectors/{connectorId}": {
      "get": {
        "tags": [
          "Azure Connector"
        ],
        "summary": "Get the details of connector",
        "operationId": "getDetailsUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "connectorId",
            "in": "path",
            "description": "Specify the connector ID of a specific connector in the userâ€™s scope.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AzureConnectorResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      },
      "put": {
        "tags": [
          "Azure Connector"
        ],
        "summary": "Update the existing connector",
        "operationId": "updateConnectorUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "connectorBody",
            "description": "<a href=\"/cloudview/help/index.htm#t=connector%2Fazure_v1%2Fconfigure_azure_connectors.htm\" target=\"_blank\">Click here</a> to know more about parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AzureConnectorUpdateRequest"
            }
          },
          {
            "name": "connectorId",
            "in": "path",
            "description": "Specify the connector ID of a specific connector in the userâ€™s scope.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AzureConnectorResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/azure/connectors/{connectorId}/errors": {
      "get": {
        "tags": [
          "Azure Connector"
        ],
        "summary": "Get the list of errors encountered when executing Azure connector",
        "operationId": "getAzureErrorsListUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "connectorId",
            "in": "path",
            "description": "Specify the connector ID of a specific Azure connector in the userâ€™s scope.",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageNo",
            "in": "query",
            "description": "The page to be returned.",
            "required": true,
            "type": "integer",
            "default": 0,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records per page to be included in the response.",
            "required": true,
            "type": "integer",
            "default": 50,
            "format": "int32",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageImplÂ«AzureConnectorErrorResponseÂ»"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/azure/evaluations/stats/{controlId}/{connectorId}": {
      "get": {
        "tags": [
          "Azure Evaluations"
        ],
        "summary": "Get the stats for specified control id and resource id",
        "operationId": "getEvaluationsStatsUsingGET_1",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "connectorId",
            "in": "path",
            "description": "connectorId",
            "required": true,
            "type": "string"
          },
          {
            "name": "controlId",
            "in": "path",
            "description": "controlId",
            "required": true,
            "type": "string"
          },
          {
            "name": "resourceId",
            "in": "query",
            "description": "resourceId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EvaluationDates"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/azure/evaluations/{subscriptionId}": {
      "get": {
        "tags": [
          "Azure Evaluations"
        ],
        "summary": "Get the list of evaluations as per the account for Azure Controls",
        "operationId": "getEvaluatedControlsUsingGET_1",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter the resources list by providing a query using Qualys syntax. <a href=\"/cloudview/help/search_tips/search_ui_evaluations.htm\" target=\"_blank\">Click here</a> for help with creating your query.",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "pageNo",
            "in": "query",
            "description": "The page to be returned.",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records per page to be included in the response.",
            "required": false,
            "type": "integer",
            "default": 300,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "Specify the ID of a specific subscription in the userâ€™s scope.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageImplÂ«AzureEvaluationSummaryListResponseÂ»"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/azure/evaluations/{subscriptionId}/resources/{controlId}": {
      "get": {
        "tags": [
          "Azure Evaluations"
        ],
        "summary": "Get the resources evaluated for the specified Azure account and control id",
        "operationId": "getEvaluatedResourcesUsingGET_1",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "controlId",
            "in": "path",
            "description": "Specify the control ID of a control for which resources evaluated need to be fetched",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter the resources list by providing a query using Qualys syntax. <a href=\"/cloudview/help/search_tips/search_ui_evaluations.htm\" target=\"_blank\">Click here</a> for help with creating your query.",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "pageNo",
            "in": "query",
            "description": "The page to be returned.",
            "required": true,
            "type": "integer",
            "default": 0,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records per page to be included in the response.",
            "required": true,
            "type": "integer",
            "default": 50,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "Specify the Subscription Id of a specific Subscription in the userâ€™s scope.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageImplÂ«AzureEvaluationDetailResponseÂ»"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/gcp/connectors": {
      "get": {
        "tags": [
          "GCP Connector"
        ],
        "summary": "Get the list of connectors",
        "operationId": "getListUsingGET_2",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter the list of connectors using Qualys syntax.",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "pageNo",
            "in": "query",
            "description": "The page to be returned.",
            "required": true,
            "type": "integer",
            "default": 0,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records per page to be included in the response.",
            "required": true,
            "type": "integer",
            "default": 50,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the results using a Qualys token. For Example lastSyncedOn:desc.",
            "required": false,
            "type": "string",
            "default": "lastSyncedOn:desc",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageImplÂ«GcpConnectorResponseÂ»"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      },
      "post": {
        "tags": [
          "GCP Connector"
        ],
        "summary": "Create a new connector",
        "operationId": "createUsingPOST_2",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "configFile",
            "in": "formData",
            "description": "Provide the <a href=\"/cloudview/help/index.htm#t=connector%2Fgcp_v1%2Fgcp_config_download.htm\" target=\"_blank\">configuration file</a>.",
            "required": true,
            "type": "file"
          },
          {
            "in": "formData",
            "name": "description",
            "description": "Description of the connector",
            "required": false,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "name",
            "description": "Name of the connector",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "pollingFrequencyInHrs",
            "description": "Polling frequency in hours",
            "required": false,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "pollingFrequencyInMinutes",
            "description": "Polling frequency in minutes",
            "required": false,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "projectId",
            "description": "Project Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "remediationEnabled",
            "description": "Enable Remediation",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GcpConnectorResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      },
      "delete": {
        "tags": [
          "GCP Connector"
        ],
        "summary": "Delete the provided connectors",
        "operationId": "deleteConnectorsUsingDELETE_2",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "connectorIds",
            "description": "Specify the IDs of the connectors to be deleted.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/gcp/connectors/connectors/disable": {
      "patch": {
        "tags": [
          "GCP Connector"
        ],
        "summary": "Disable the provided connectors",
        "operationId": "disableConnectorsUsingPATCH_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "connectorIds",
            "description": "Specify the IDs of the connectors to be disabled.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AckRequest"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/gcp/connectors/connectors/enable": {
      "patch": {
        "tags": [
          "GCP Connector"
        ],
        "summary": "Enable the provided connectors",
        "operationId": "enableConnectorsUsingPATCH_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "connectorIds",
            "description": "Specify the IDs of the connectors to be enabled.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AckRequest"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/gcp/connectors/run": {
      "post": {
        "tags": [
          "GCP Connector"
        ],
        "summary": "Run the provided connectors",
        "operationId": "runConnectorUsingPOST_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "connectorIds",
            "description": "Specify the IDs of the connectors that you want to execute/run.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/gcp/connectors/{connectorId}": {
      "get": {
        "tags": [
          "GCP Connector"
        ],
        "summary": "Get the details of connector",
        "operationId": "getDetailsUsingGET_2",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "connectorId",
            "in": "path",
            "description": "Specify the connector ID of a specific connector in the userâ€™s scope.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GcpConnectorResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      },
      "put": {
        "tags": [
          "GCP Connector"
        ],
        "summary": "Update the existing connector",
        "operationId": "updateConnectorUsingPUT_2",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "configFile",
            "in": "formData",
            "description": "Provide the <a href=\"/cloudview/help/index.htm#t=connector%2Fgcp_v1%2Fgcp_config_download.htm\" target=\"_blank\">configuration file</a>.",
            "required": false,
            "type": "file"
          },
          {
            "name": "connectorId",
            "in": "path",
            "description": "Specify the connector ID of a specific connector in the userâ€™s scope.",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "description",
            "description": "Description of the connector",
            "required": false,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "name",
            "description": "Name of the connector",
            "required": false,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "pollingFrequencyInHrs",
            "description": "Polling frequency in hours",
            "required": false,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "pollingFrequencyInMinutes",
            "description": "Polling frequency in minutes",
            "required": false,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "remediationEnabled",
            "description": "Enable Remediation",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GcpConnectorResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/gcp/connectors/{connectorId}/errors": {
      "get": {
        "tags": [
          "GCP Connector"
        ],
        "summary": "Get the list of errors encountered when executing GCP connector",
        "operationId": "getGcpErrorsListUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "connectorId",
            "in": "path",
            "description": "Specify the connector ID of a specific GCP connector in the userâ€™s scope.",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageNo",
            "in": "query",
            "description": "The page to be returned.",
            "required": true,
            "type": "integer",
            "default": 0,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records per page to be included in the response.",
            "required": true,
            "type": "integer",
            "default": 50,
            "format": "int32",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageImplÂ«GcpConnectorErrorResponseÂ»"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/gcp/evaluations/stats/{controlId}/{connectorId}": {
      "get": {
        "tags": [
          "GCP Evaluations"
        ],
        "summary": "Get the stats for specified control id and resource id",
        "operationId": "getEvaluationsStatsUsingGET_2",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "connectorId",
            "in": "path",
            "description": "connectorId",
            "required": true,
            "type": "string"
          },
          {
            "name": "controlId",
            "in": "path",
            "description": "controlId",
            "required": true,
            "type": "string"
          },
          {
            "name": "resourceId",
            "in": "query",
            "description": "resourceId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EvaluationDates"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/gcp/evaluations/{projectId}": {
      "get": {
        "tags": [
          "GCP Evaluations"
        ],
        "summary": "Get the list of evaluations as per the account for GCP Controls",
        "operationId": "getEvaluatedControlsUsingGET_2",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter the resources list by providing a query using Qualys syntax. <a href=\"/cloudview/help/search_tips/search_ui_evaluations.htm\" target=\"_blank\">Click here</a> for help with creating your query.",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "pageNo",
            "in": "query",
            "description": "The page to be returned.",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records per page to be included in the response.",
            "required": false,
            "type": "integer",
            "default": 300,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Specify the projectId of a specific account in the userâ€™s scope.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageImplÂ«GcpEvaluationSummaryListResponseÂ»"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/gcp/evaluations/{projectId}/resources/{controlId}": {
      "get": {
        "tags": [
          "GCP Evaluations"
        ],
        "summary": "Get the resources evaluated for the specified GCP account and control id",
        "operationId": "getEvaluatedResourcesUsingGET_2",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "controlId",
            "in": "path",
            "description": "Specify the control ID of a control for which resources evaluated need to be fetched",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter the resources list by providing a query using Qualys syntax. <a href=\"/cloudview/help/search_tips/search_ui_evaluations.htm\" target=\"_blank\">Click here</a> for help with creating your query.",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "pageNo",
            "in": "query",
            "description": "The page to be returned.",
            "required": true,
            "type": "integer",
            "default": 0,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records per page to be included in the response.",
            "required": true,
            "type": "integer",
            "default": 50,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Specify the project Id of a specific account in the userâ€™s scope.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageImplÂ«GcpEvaluationDetailResponseÂ»"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/groups": {
      "get": {
        "tags": [
          "Connector Groups Management"
        ],
        "summary": "List the Groups",
        "operationId": "listGroupsUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "pageNo",
            "in": "query",
            "description": "The page to be returned.",
            "required": true,
            "type": "integer",
            "default": 0,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records per page to be included in the response.",
            "required": true,
            "type": "integer",
            "default": 50,
            "format": "int32",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageImplÂ«GroupResponseÂ»"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      },
      "post": {
        "tags": [
          "Connector Groups Management"
        ],
        "summary": "Create a new Group",
        "operationId": "createUsingPOST_3",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "groupName",
            "in": "query",
            "description": "Name of Group",
            "required": true,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateGroupResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/groups/connectors": {
      "post": {
        "tags": [
          "Connector Groups Management"
        ],
        "summary": "Update Groups for a Connector",
        "operationId": "updateGroupUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "cloudType",
            "in": "query",
            "description": "Cloud type",
            "required": true,
            "type": "string",
            "allowEmptyValue": false,
            "enum": [
              "AWS",
              "AZURE",
              "GCP"
            ]
          },
          {
            "in": "body",
            "name": "connectorGroupModifyRequest",
            "description": "Group Modify Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConnectorGroupModifyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GroupResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/groups/{groupUuid}": {
      "get": {
        "tags": [
          "Connector Groups Management"
        ],
        "summary": "Get the Group",
        "operationId": "getGroupUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "groupUuid",
            "in": "path",
            "description": "Group ID to get.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GroupResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/remediation/activity": {
      "get": {
        "tags": [
          "Remediation Activity"
        ],
        "summary": "Get the list of remediation activities",
        "operationId": "getRemediationHistoryUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "cloudType",
            "in": "query",
            "description": "Cloud Type",
            "required": true,
            "type": "string",
            "allowEmptyValue": false,
            "enum": [
              "AWS",
              "AZURE",
              "GCP"
            ]
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter the resources list by providing a query using Qualys syntax. <a href=\"/cloudview/help/search_tips/search_remediation_activity.htm\" target=\"_blank\">Click here</a> for help with creating your query.",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "pageNo",
            "in": "query",
            "description": "The page to be returned.",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records per page to be included in the response.",
            "required": false,
            "type": "integer",
            "default": 50,
            "format": "int32",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageImplÂ«RemediationActivityResponseÂ»"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/report/assessment/create": {
      "post": {
        "tags": [
          "Assessment Reports"
        ],
        "summary": "API to create new  Assessment report",
        "operationId": "createReportUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "createReportRequest",
            "description": "Create Report Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateReportRequestApi"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/report/assessment/list": {
      "get": {
        "tags": [
          "Assessment Reports"
        ],
        "summary": "Get the list of assessment reports.",
        "operationId": "getListUsingGET_4",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "createdBy",
            "in": "query",
            "description": "Created By filter",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "pageNo",
            "in": "query",
            "description": "The page to be returned.",
            "required": true,
            "type": "integer",
            "default": 0,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records per page to be included in the response.",
            "required": true,
            "type": "integer",
            "default": 50,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "reportName",
            "in": "query",
            "description": "Report Name filter",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sort By filter can be used from (createdOn, status, reportName)",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "status",
            "in": "query",
            "description": "Report Status filter",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PivotListResponseÂ«ReportServiceResponseÂ»"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/report/assessment/{reportId}/download": {
      "get": {
        "tags": [
          "Assessment Reports"
        ],
        "summary": "API to download report",
        "operationId": "downloadReportUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "reportFormat",
            "in": "query",
            "description": "Report Format",
            "required": true,
            "type": "string",
            "allowEmptyValue": false,
            "enum": [
              "csv",
              "pdf"
            ]
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "The report Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/report/assessment/{reportId}/rerun": {
      "post": {
        "tags": [
          "Assessment Reports"
        ],
        "summary": "API to Re-Run report",
        "operationId": "rerunReportUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "description": "reportId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/reports": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get the list of report configurations",
        "operationId": "getListUsingGET_3",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "pageNo",
            "in": "query",
            "description": "The page to be returned.",
            "required": true,
            "type": "integer",
            "default": 0,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records per page to be included in the response.",
            "required": true,
            "type": "integer",
            "default": 50,
            "format": "int32",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageImplÂ«ReportConfigResponseÂ»"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      },
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Create a new report configuration",
        "operationId": "createUsingPOST_4",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "configurationBody",
            "description": "Specify the report configuration details.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReportConfigCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReportConfigResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Reports"
        ],
        "summary": "Delete the provided report configs",
        "operationId": "deleteUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "reportIds",
            "description": "Specify the report id's to be deleted.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/reports/mandates": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get list of all the supported mandates",
        "operationId": "getAllMandatesUsingGET",
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MandateConfigResponse"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/reports/policies": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get list of all the supported policies",
        "operationId": "getAllPoliciesUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "cloudType",
            "in": "query",
            "description": "Cloud Type",
            "required": true,
            "type": "string",
            "allowEmptyValue": false,
            "enum": [
              "AWS",
              "AZURE",
              "GCP"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PolicyConfigResponse"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/reports/report_data/{reportId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get the complete data of the specified report",
        "operationId": "getDataUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "description": "Specify the report ID of a specific report in the userâ€™s scope.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReportDataBaseResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/reports/{reportId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get the details of specified report configuration",
        "operationId": "getUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "description": "Specify the report ID of a specific report configuration in the userâ€™s scope.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReportConfigResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Reports"
        ],
        "summary": "Update the existing report configuration",
        "operationId": "updateUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "configurationBody",
            "description": "Specify the report configuration details.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReportConfigUpdateRequest"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "Specify the report ID of a specific report in the userâ€™s scope.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReportConfigResponse"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/rules": {
      "get": {
        "tags": [
          "Response Rules"
        ],
        "summary": "Get rules",
        "operationId": "getAllRulesByFilterUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "cloudType",
            "in": "query",
            "description": "Cloud Type",
            "required": true,
            "type": "string",
            "allowEmptyValue": false,
            "enum": [
              "AWS",
              "AZURE",
              "GCP"
            ]
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter the Rules list by providing a query using Qualys syntax.",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "pageNo",
            "in": "query",
            "description": "The page to be returned.",
            "required": true,
            "type": "integer",
            "default": 0,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records per page to be included in the response.",
            "required": true,
            "type": "integer",
            "default": 50,
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "ruleType",
            "in": "query",
            "description": "Rule Type",
            "required": true,
            "type": "string",
            "allowEmptyValue": false,
            "enum": [
              "simple_alert",
              "time_window_schedule_alert"
            ]
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "Sort the results based on field name ",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "SortOrder",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RuleResponse"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      },
      "post": {
        "tags": [
          "Response Rules"
        ],
        "summary": "Create a new rule",
        "operationId": "createRuleUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "cloudType",
            "in": "query",
            "description": "Cloud Type",
            "required": true,
            "type": "string",
            "allowEmptyValue": false,
            "enum": [
              "AWS",
              "AZURE",
              "GCP"
            ]
          },
          {
            "in": "body",
            "name": "ruleBody",
            "description": "ruleRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RuleRequest"
            }
          },
          {
            "name": "ruleType",
            "in": "query",
            "description": "Rule Type",
            "required": true,
            "type": "string",
            "allowEmptyValue": false,
            "enum": [
              "simple_alert",
              "time_window_schedule_alert"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseEntity"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/rules/delete": {
      "post": {
        "tags": [
          "Response Rules"
        ],
        "summary": "Delete existing rules",
        "operationId": "deleteRuleUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "ruleIds",
            "description": "Specify the IDs of the rule to be deleted.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BulkIdParam"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/rules/disable": {
      "post": {
        "tags": [
          "Response Rules"
        ],
        "summary": "Disable enabled rules",
        "operationId": "disableRuleUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "ruleIds",
            "description": "Specify the IDs of the rule to be disable.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BulkIdParam"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/rules/enable": {
      "post": {
        "tags": [
          "Response Rules"
        ],
        "summary": "Enable disabled rules",
        "operationId": "activateRuleUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "ruleIds",
            "description": "Specify the IDs of the rule to be enabled.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BulkIdParam"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/rules/{ruleId}": {
      "get": {
        "tags": [
          "Response Rules"
        ],
        "summary": "Get rule by Id",
        "operationId": "getRuleByIdUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "ruleId",
            "in": "path",
            "description": "Specify the rule ID of a specific action in the userâ€™s scope.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RuleResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      },
      "put": {
        "tags": [
          "Response Rules"
        ],
        "summary": "Update an existing rule",
        "operationId": "updateRuleUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "ruleId",
            "in": "path",
            "description": "Specify the rule ID of a specific rule in the userâ€™s scope.",
            "required": true,
            "type": "string"
          },
          {
            "name": "ruleType",
            "in": "query",
            "description": "Rule Type",
            "required": true,
            "type": "string",
            "allowEmptyValue": false,
            "enum": [
              "simple_alert",
              "time_window_schedule_alert"
            ]
          },
          {
            "in": "body",
            "name": "ruleUpdateRequest",
            "description": "ruleUpdateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RuleUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseEntity"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/users/{userName}/groupScope": {
      "post": {
        "tags": [
          "User Access Management"
        ],
        "summary": "Update Groups scope for user",
        "operationId": "updateGroupScopeForUserUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "userGroupModifyRequest",
            "description": "Group Scope to be updated for User",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserGroupModifyRequest"
            }
          },
          {
            "name": "userName",
            "in": "path",
            "description": "User name for which to modify scope",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    },
    "/rest/v1/users/{userName}/scope": {
      "get": {
        "tags": [
          "User Access Management"
        ],
        "summary": "Get the User scope",
        "operationId": "getUserScopeUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "userName",
            "in": "path",
            "description": "User name for which to get scope",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      },
      "post": {
        "tags": [
          "User Access Management"
        ],
        "summary": "Update Connectors scope for user",
        "operationId": "updateScopeForUserUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "cloudType",
            "in": "query",
            "description": "Cloud type",
            "required": true,
            "type": "string",
            "allowEmptyValue": false,
            "enum": [
              "AWS",
              "AZURE",
              "GCP"
            ]
          },
          {
            "in": "body",
            "name": "userAccountModifyRequest",
            "description": "Scope to be updated for User",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserAccountModifyRequest"
            }
          },
          {
            "name": "userName",
            "in": "path",
            "description": "User name for which to modify scope",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "401": {
            "description": "Unauthorized user",
            "schema": {
              "$ref": "#/definitions/APIErrorFacade"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "deprecated": false
      }
    }
  },
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic"
    }
  },
  "definitions": {
    "APIErrorFacade": {
      "type": "object",
      "properties": {
        "errorCode": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "APIErrorFacade"
    },
    "Account": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "cloudType": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "Account"
    },
    "AckRequest": {
      "type": "object",
      "properties": {
        "acknowledged": {
          "type": "boolean"
        }
      },
      "title": "AckRequest"
    },
    "ActionRequest": {
      "type": "object",
      "properties": {
        "actionId": {
          "type": "string"
        },
        "actionType": {
          "type": "string",
          "enum": [
            "qemail",
            "slack",
            "pagerduty"
          ]
        },
        "emailRecipients": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "emailSubject": {
          "type": "string"
        },
        "pagerSubjectLine": {
          "type": "string"
        },
        "slackChannel": {
          "type": "string"
        }
      },
      "title": "ActionRequest"
    },
    "ActionResponse": {
      "type": "object",
      "properties": {
        "actionType": {
          "type": "string",
          "enum": [
            "qemail",
            "slack",
            "pagerduty"
          ]
        },
        "activeRules": {
          "type": "integer",
          "format": "int64"
        },
        "alert": {
          "type": "string"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "createdBy": {
          "type": "string"
        },
        "createdById": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "disabledRules": {
          "type": "integer",
          "format": "int64"
        },
        "emailFromAddress": {
          "type": "string"
        },
        "emailRecipients": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "emailReplyTo": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        },
        "pagerdutyClient": {
          "type": "string"
        },
        "pagerdutyEventType": {
          "type": "string"
        },
        "pagerdutyServiceKey": {
          "type": "string"
        },
        "slackChannel": {
          "type": "string"
        },
        "slackWebhookUri": {
          "type": "string"
        },
        "smtpHost": {
          "type": "string"
        },
        "smtpPassword": {
          "type": "string"
        },
        "smtpPort": {
          "type": "integer",
          "format": "int32"
        },
        "smtpUserName": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        },
        "updatedBy": {
          "type": "string"
        },
        "updatedById": {
          "type": "string"
        }
      },
      "title": "ActionResponse"
    },
    "ActionUDT": {
      "type": "object",
      "properties": {
        "actionType": {
          "type": "string"
        },
        "alert": {
          "type": "string"
        },
        "bodyParameters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "emailRecipients": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "slackChannel": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        },
        "subjectParameters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "ActionUDT"
    },
    "AlertResponse": {
      "type": "object",
      "properties": {
        "actionId": {
          "type": "string"
        },
        "actionName": {
          "type": "string"
        },
        "actionType": {
          "type": "string"
        },
        "aggregate": {
          "type": "boolean"
        },
        "alert": {
          "type": "string"
        },
        "cloudType": {
          "type": "string"
        },
        "createdBy": {
          "type": "string"
        },
        "createdById": {
          "type": "string"
        },
        "emailRecipients": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "isRuleDeleted": {
          "type": "boolean"
        },
        "ruleDescription": {
          "type": "string"
        },
        "ruleId": {
          "type": "string"
        },
        "ruleName": {
          "type": "string"
        },
        "slackChannel": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "statusDate": {
          "type": "integer",
          "format": "int64"
        },
        "statusMessage": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        }
      },
      "title": "AlertResponse"
    },
    "AwsConnectorCreateRequest": {
      "type": "object",
      "properties": {
        "arn": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "isChinaRegion": {
          "type": "boolean"
        },
        "isGovCloud": {
          "type": "boolean"
        },
        "isPortalConnector": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "pollingFrequency": {
          "$ref": "#/definitions/RunFrequency"
        },
        "remediationEnabled": {
          "type": "boolean"
        }
      },
      "title": "AwsConnectorCreateRequest"
    },
    "AwsConnectorErrorResponse": {
      "type": "object",
      "properties": {
        "connectorId": {
          "type": "string"
        },
        "connectorName": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "occuredOn": {
          "type": "string"
        },
        "region": {
          "type": "string"
        }
      },
      "title": "AwsConnectorErrorResponse"
    },
    "AwsConnectorResponse": {
      "type": "object",
      "properties": {
        "accountAlias": {
          "type": "string"
        },
        "arn": {
          "type": "string"
        },
        "awsAccountId": {
          "type": "string"
        },
        "baseAccountId": {
          "type": "string"
        },
        "connectorId": {
          "type": "string",
          "format": "uuid"
        },
        "description": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Group"
          }
        },
        "isChinaRegion": {
          "type": "boolean"
        },
        "isDisabled": {
          "type": "boolean"
        },
        "isGovCloud": {
          "type": "boolean"
        },
        "isPortalConnector": {
          "type": "boolean"
        },
        "lastSyncedOn": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nextSyncedOn": {
          "type": "string"
        },
        "pollingFrequency": {
          "$ref": "#/definitions/RunFrequency"
        },
        "portalConnectorUuid": {
          "type": "string"
        },
        "provider": {
          "type": "string",
          "enum": [
            "AWS"
          ]
        },
        "remediationEnabled": {
          "type": "boolean"
        },
        "state": {
          "type": "string"
        },
        "totalAssets": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "AwsConnectorResponse"
    },
    "AwsEvaluationDetailResponse": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "connectorId": {
          "type": "string"
        },
        "evaluatedOn": {
          "type": "string"
        },
        "evaluationDates": {
          "$ref": "#/definitions/EvaluationDates"
        },
        "evidences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EvaluationEvidence"
          }
        },
        "region": {
          "type": "string"
        },
        "resourceId": {
          "type": "string"
        },
        "resourceType": {
          "type": "string"
        },
        "result": {
          "type": "string"
        }
      },
      "title": "AwsEvaluationDetailResponse"
    },
    "AwsEvaluationSummaryListResponse": {
      "type": "object",
      "properties": {
        "controlId": {
          "type": "string"
        },
        "controlName": {
          "type": "string"
        },
        "criticality": {
          "type": "string"
        },
        "failedResources": {
          "type": "integer",
          "format": "int64"
        },
        "passWithExceptionResources": {
          "type": "integer",
          "format": "int64"
        },
        "passedResources": {
          "type": "integer",
          "format": "int64"
        },
        "policyNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "result": {
          "type": "string"
        },
        "service": {
          "type": "string"
        }
      },
      "title": "AwsEvaluationSummaryListResponse"
    },
    "AzureConnectorCreateRequest": {
      "type": "object",
      "properties": {
        "applicationId": {
          "type": "string"
        },
        "authenticationKey": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "directoryId": {
          "type": "string"
        },
        "isGovCloud": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "pollingFrequency": {
          "$ref": "#/definitions/RunFrequency"
        },
        "remediationEnabled": {
          "type": "boolean"
        },
        "subscriptionId": {
          "type": "string"
        }
      },
      "title": "AzureConnectorCreateRequest"
    },
    "AzureConnectorErrorResponse": {
      "type": "object",
      "properties": {
        "connectorId": {
          "type": "string"
        },
        "connectorName": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "occuredOn": {
          "type": "string"
        }
      },
      "title": "AzureConnectorErrorResponse"
    },
    "AzureConnectorResponse": {
      "type": "object",
      "properties": {
        "applicationId": {
          "type": "string"
        },
        "connectorId": {
          "type": "string",
          "format": "uuid"
        },
        "description": {
          "type": "string"
        },
        "directoryId": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Group"
          }
        },
        "isDisabled": {
          "type": "boolean"
        },
        "isGovCloud": {
          "type": "boolean"
        },
        "lastSyncedOn": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nextSyncedOn": {
          "type": "string"
        },
        "pollingFrequency": {
          "$ref": "#/definitions/RunFrequency"
        },
        "provider": {
          "type": "string",
          "enum": [
            "AZURE"
          ]
        },
        "remediationEnabled": {
          "type": "boolean"
        },
        "state": {
          "type": "string"
        },
        "subscriptionId": {
          "type": "string"
        },
        "subscriptionName": {
          "type": "string"
        },
        "totalAssets": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "AzureConnectorResponse"
    },
    "AzureConnectorUpdateRequest": {
      "type": "object",
      "properties": {
        "applicationId": {
          "type": "string"
        },
        "authenticationKey": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "directoryId": {
          "type": "string"
        },
        "isGovCloud": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "pollingFrequency": {
          "$ref": "#/definitions/RunFrequency"
        },
        "remediationEnabled": {
          "type": "boolean"
        }
      },
      "title": "AzureConnectorUpdateRequest"
    },
    "AzureEvaluationDetailResponse": {
      "type": "object",
      "properties": {
        "evaluatedOn": {
          "type": "string"
        },
        "evaluationDates": {
          "$ref": "#/definitions/EvaluationDates"
        },
        "evidences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EvaluationEvidence"
          }
        },
        "region": {
          "type": "string"
        },
        "resourceId": {
          "type": "string"
        },
        "resourceType": {
          "type": "string"
        },
        "result": {
          "type": "string"
        },
        "subscriptionId": {
          "type": "string"
        }
      },
      "title": "AzureEvaluationDetailResponse"
    },
    "AzureEvaluationSummaryListResponse": {
      "type": "object",
      "properties": {
        "controlId": {
          "type": "string"
        },
        "controlName": {
          "type": "string"
        },
        "criticality": {
          "type": "string"
        },
        "failedResources": {
          "type": "integer",
          "format": "int64"
        },
        "passWithExceptionResources": {
          "type": "integer",
          "format": "int64"
        },
        "passedResources": {
          "type": "integer",
          "format": "int64"
        },
        "policyNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "result": {
          "type": "string"
        },
        "service": {
          "type": "string"
        }
      },
      "title": "AzureEvaluationSummaryListResponse"
    },
    "BulkIdParam": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "title": "BulkIdParam"
    },
    "Connector": {
      "type": "object",
      "properties": {
        "accountIdentifier": {
          "type": "string"
        },
        "cloudType": {
          "type": "string"
        },
        "connectorUuid": {
          "type": "string"
        }
      },
      "title": "Connector"
    },
    "ConnectorGroupModifyRequest": {
      "type": "object",
      "properties": {
        "accountIdentifiers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "add": {
          "$ref": "#/definitions/ModifyRequest"
        },
        "remove": {
          "$ref": "#/definitions/ModifyRequest"
        }
      },
      "title": "ConnectorGroupModifyRequest"
    },
    "ConnectorUpdateRequest": {
      "type": "object",
      "properties": {
        "arn": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "isChinaRegion": {
          "type": "boolean"
        },
        "isGovCloud": {
          "type": "boolean"
        },
        "isPortalConnector": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "pollingFrequency": {
          "$ref": "#/definitions/RunFrequency"
        },
        "remediationEnabled": {
          "type": "boolean"
        }
      },
      "title": "ConnectorUpdateRequest"
    },
    "CreateGroupResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "groupId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "CreateGroupResponse"
    },
    "CreateReportRequestApi": {
      "type": "object",
      "properties": {
        "reportName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "format": {
          "type": "string"
        },
        "resourceSummaryInclude": {
          "type": "boolean"
        },
        "cloudType": {
          "type": "string"
        },
        "query": {
          "type": "string"
        },
        "startDate": {
          "type": "string"
        },
        "endDate": {
          "type": "string"
        },
        "policyIds": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "resourceResults": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "PASS",
              "FAIL",
              "PASS_WITH_EXCEPTION",
              "PASSE"
            ]
          }
        },
        "groupIds": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "connectorIds": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "title": "CreateReportRequestApi"
    },
    "DataAccount": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "cloudType": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "DataAccount"
    },
    "DataStats": {
      "type": "object",
      "properties": {
        "failCount": {
          "type": "integer",
          "format": "int64"
        },
        "failPercent": {
          "type": "number"
        },
        "passCount": {
          "type": "integer",
          "format": "int64"
        },
        "passPercent": {
          "type": "number"
        }
      },
      "title": "DataStats"
    },
    "DataSummary": {
      "type": "object",
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataAccount"
          }
        },
        "cloudType": {
          "type": "string"
        },
        "controlsCount": {
          "type": "integer",
          "format": "int64"
        },
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupResponse"
          }
        },
        "mandateName": {
          "type": "string"
        },
        "mandatePassPercent": {
          "type": "number"
        },
        "mandatesCount": {
          "type": "integer",
          "format": "int64"
        },
        "policiesCount": {
          "type": "integer",
          "format": "int64"
        },
        "requirementsCount": {
          "type": "integer",
          "format": "int64"
        },
        "totalEvaluationsCount": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "DataSummary"
    },
    "EmailActionRequest": {
      "type": "object",
      "properties": {
        "actionDescription": {
          "type": "string"
        },
        "actionName": {
          "type": "string"
        },
        "recipients": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "subject": {
          "type": "string"
        }
      },
      "title": "EmailActionRequest"
    },
    "EmailActionUpdateRequest": {
      "type": "object",
      "properties": {
        "actionDescription": {
          "type": "string"
        },
        "actionName": {
          "type": "string"
        },
        "recipients": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "subject": {
          "type": "string"
        }
      },
      "title": "EmailActionUpdateRequest"
    },
    "EvaluationDates": {
      "type": "object",
      "properties": {
        "dateFixed": {
          "type": "string"
        },
        "dateReopen": {
          "type": "string"
        },
        "exceptionMetadata": {
          "$ref": "#/definitions/ExceptionListResponse"
        },
        "firstEvaluated": {
          "type": "string"
        },
        "lastEvaluated": {
          "type": "string"
        }
      },
      "title": "EvaluationDates"
    },
    "EvaluationEvidence": {
      "type": "object",
      "properties": {
        "actualValue": {
          "type": "string"
        },
        "settingName": {
          "type": "string"
        }
      },
      "title": "EvaluationEvidence"
    },
    "ExceptionListResponse": {
      "type": "object",
      "properties": {
        "createdBy": {
          "type": "string"
        },
        "createdByUuid": {
          "type": "string",
          "format": "uuid"
        },
        "createdOn": {
          "type": "string"
        },
        "customerId": {
          "type": "integer",
          "format": "int64"
        },
        "customerUuid": {
          "type": "string",
          "format": "uuid"
        },
        "description": {
          "type": "string"
        },
        "endingDate": {
          "type": "string"
        },
        "informationSecurityPolicy": {
          "type": "string"
        },
        "informationSecurityProcedure": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "referenceDocLink": {
          "type": "string"
        },
        "startingDate": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "updatedBy": {
          "type": "string"
        },
        "updatedByUuid": {
          "type": "string",
          "format": "uuid"
        },
        "updatedOn": {
          "type": "string"
        },
        "uuid": {
          "type": "string",
          "format": "uuid"
        }
      },
      "title": "ExceptionListResponse"
    },
    "File": {
      "type": "object",
      "properties": {
        "absolute": {
          "type": "boolean"
        },
        "absoluteFile": {
          "$ref": "#/definitions/File"
        },
        "absolutePath": {
          "type": "string"
        },
        "canonicalFile": {
          "$ref": "#/definitions/File"
        },
        "canonicalPath": {
          "type": "string"
        },
        "directory": {
          "type": "boolean"
        },
        "file": {
          "type": "boolean"
        },
        "freeSpace": {
          "type": "integer",
          "format": "int64"
        },
        "hidden": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "parent": {
          "type": "string"
        },
        "parentFile": {
          "$ref": "#/definitions/File"
        },
        "path": {
          "type": "string"
        },
        "totalSpace": {
          "type": "integer",
          "format": "int64"
        },
        "usableSpace": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "File"
    },
    "GcpConnectorErrorResponse": {
      "type": "object",
      "properties": {
        "connectorId": {
          "type": "string"
        },
        "connectorName": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "occuredOn": {
          "type": "string"
        },
        "region": {
          "type": "string"
        }
      },
      "title": "GcpConnectorErrorResponse"
    },
    "GcpConnectorResponse": {
      "type": "object",
      "properties": {
        "connectorId": {
          "type": "string",
          "format": "uuid"
        },
        "description": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Group"
          }
        },
        "isDisabled": {
          "type": "boolean"
        },
        "lastSyncedOn": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nextSyncedOn": {
          "type": "string"
        },
        "pollingFrequency": {
          "$ref": "#/definitions/RunFrequency"
        },
        "projectId": {
          "type": "string"
        },
        "provider": {
          "type": "string",
          "enum": [
            "GCP"
          ]
        },
        "remediationEnabled": {
          "type": "boolean"
        },
        "state": {
          "type": "string"
        },
        "totalAssets": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "GcpConnectorResponse"
    },
    "GcpEvaluationDetailResponse": {
      "type": "object",
      "properties": {
        "evaluatedOn": {
          "type": "string"
        },
        "evaluationDates": {
          "$ref": "#/definitions/EvaluationDates"
        },
        "evidences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EvaluationEvidence"
          }
        },
        "projectId": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "resourceId": {
          "type": "string"
        },
        "resourceType": {
          "type": "string"
        },
        "result": {
          "type": "string"
        }
      },
      "title": "GcpEvaluationDetailResponse"
    },
    "GcpEvaluationSummaryListResponse": {
      "type": "object",
      "properties": {
        "controlId": {
          "type": "string"
        },
        "controlName": {
          "type": "string"
        },
        "criticality": {
          "type": "string"
        },
        "failedResources": {
          "type": "integer",
          "format": "int64"
        },
        "passWithExceptionResources": {
          "type": "integer",
          "format": "int64"
        },
        "passedResources": {
          "type": "integer",
          "format": "int64"
        },
        "policyNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "result": {
          "type": "string"
        },
        "service": {
          "type": "string"
        }
      },
      "title": "GcpEvaluationSummaryListResponse"
    },
    "Group": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      },
      "title": "Group"
    },
    "GroupResponse": {
      "type": "object",
      "properties": {
        "groupName": {
          "type": "string"
        },
        "groupUuid": {
          "type": "string",
          "format": "uuid"
        }
      },
      "title": "GroupResponse"
    },
    "InputStream": {
      "type": "object",
      "title": "InputStream"
    },
    "MandateConfigResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "MandateConfigResponse"
    },
    "ModifyGroupScope": {
      "type": "object",
      "properties": {
        "groupsIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "ModifyGroupScope"
    },
    "ModifyRequest": {
      "type": "object",
      "properties": {
        "groupIds": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "title": "ModifyRequest"
    },
    "ModifyUserScopeRequest": {
      "type": "object",
      "properties": {
        "accountIdentifiers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "regions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "ModifyUserScopeRequest"
    },
    "PageImplÂ«AwsConnectorErrorResponseÂ»": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AwsConnectorErrorResponse"
          }
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageImplÂ«AwsConnectorErrorResponseÂ»"
    },
    "PageImplÂ«AwsConnectorResponseÂ»": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AwsConnectorResponse"
          }
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageImplÂ«AwsConnectorResponseÂ»"
    },
    "PageImplÂ«AwsEvaluationDetailResponseÂ»": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AwsEvaluationDetailResponse"
          }
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageImplÂ«AwsEvaluationDetailResponseÂ»"
    },
    "PageImplÂ«AwsEvaluationSummaryListResponseÂ»": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AwsEvaluationSummaryListResponse"
          }
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageImplÂ«AwsEvaluationSummaryListResponseÂ»"
    },
    "PageImplÂ«AzureConnectorErrorResponseÂ»": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AzureConnectorErrorResponse"
          }
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageImplÂ«AzureConnectorErrorResponseÂ»"
    },
    "PageImplÂ«AzureConnectorResponseÂ»": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AzureConnectorResponse"
          }
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageImplÂ«AzureConnectorResponseÂ»"
    },
    "PageImplÂ«AzureEvaluationDetailResponseÂ»": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AzureEvaluationDetailResponse"
          }
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageImplÂ«AzureEvaluationDetailResponseÂ»"
    },
    "PageImplÂ«AzureEvaluationSummaryListResponseÂ»": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AzureEvaluationSummaryListResponse"
          }
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageImplÂ«AzureEvaluationSummaryListResponseÂ»"
    },
    "PageImplÂ«GcpConnectorErrorResponseÂ»": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GcpConnectorErrorResponse"
          }
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageImplÂ«GcpConnectorErrorResponseÂ»"
    },
    "PageImplÂ«GcpConnectorResponseÂ»": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GcpConnectorResponse"
          }
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageImplÂ«GcpConnectorResponseÂ»"
    },
    "PageImplÂ«GcpEvaluationDetailResponseÂ»": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GcpEvaluationDetailResponse"
          }
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageImplÂ«GcpEvaluationDetailResponseÂ»"
    },
    "PageImplÂ«GcpEvaluationSummaryListResponseÂ»": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GcpEvaluationSummaryListResponse"
          }
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageImplÂ«GcpEvaluationSummaryListResponseÂ»"
    },
    "PageImplÂ«GroupResponseÂ»": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupResponse"
          }
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageImplÂ«GroupResponseÂ»"
    },
    "PageImplÂ«RemediationActivityResponseÂ»": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RemediationActivityResponse"
          }
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageImplÂ«RemediationActivityResponseÂ»"
    },
    "PageImplÂ«ReportConfigResponseÂ»": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReportConfigResponse"
          }
        },
        "first": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfElements": {
          "type": "integer",
          "format": "int32"
        },
        "pageable": {
          "$ref": "#/definitions/Pageable"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageImplÂ«ReportConfigResponseÂ»"
    },
    "Pageable": {
      "type": "object",
      "properties": {
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "pageNumber": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "paged": {
          "type": "boolean"
        },
        "sort": {
          "$ref": "#/definitions/Sort"
        },
        "unpaged": {
          "type": "boolean"
        }
      },
      "title": "Pageable"
    },
    "PagerdutyConnectionParam": {
      "type": "object",
      "properties": {
        "serviceKey": {
          "type": "string"
        }
      },
      "title": "PagerdutyConnectionParam"
    },
    "PagerdutyRequest": {
      "type": "object",
      "properties": {
        "actionDescription": {
          "type": "string"
        },
        "actionName": {
          "type": "string"
        },
        "client": {
          "type": "string"
        },
        "serviceKey": {
          "type": "string"
        },
        "subjectLine": {
          "type": "string"
        }
      },
      "title": "PagerdutyRequest"
    },
    "PagerdutyUpdateRequest": {
      "type": "object",
      "properties": {
        "actionDescription": {
          "type": "string"
        },
        "actionName": {
          "type": "string"
        },
        "client": {
          "type": "string"
        },
        "serviceKey": {
          "type": "string"
        },
        "subjectLine": {
          "type": "string"
        }
      },
      "title": "PagerdutyUpdateRequest"
    },
    "PivotListResponseÂ«ReportServiceResponseÂ»": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReportServiceResponse"
          }
        }
      },
      "title": "PivotListResponseÂ«ReportServiceResponseÂ»"
    },
    "PolicyConfigResponse": {
      "type": "object",
      "properties": {
        "cloudType": {
          "type": "string"
        },
        "groupIds": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      },
      "title": "PolicyConfigResponse"
    },
    "PolicyFilter": {
      "type": "object",
      "properties": {
        "cloudType": {
          "type": "string"
        },
        "policyId": {
          "type": "string"
        }
      },
      "title": "PolicyFilter"
    },
    "RemediationActivityResponse": {
      "type": "object",
      "properties": {
        "Errors": {
          "type": "string"
        },
        "accountId": {
          "type": "string"
        },
        "cloudType": {
          "type": "string",
          "enum": [
            "AWS",
            "AZURE",
            "GCP"
          ]
        },
        "connectorName": {
          "type": "string"
        },
        "controlId": {
          "type": "integer",
          "format": "int64"
        },
        "controlName": {
          "type": "string"
        },
        "policyName": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "remediationAction": {
          "type": "string"
        },
        "remediationReason": {
          "type": "string"
        },
        "resourceId": {
          "type": "string"
        },
        "resourceType": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "triggeredBy": {
          "type": "string"
        },
        "triggeredOn": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "RemediationActivityResponse"
    },
    "ReportConfigCreateRequest": {
      "type": "object",
      "properties": {
        "cloudType": {
          "type": "string"
        },
        "connectorIds": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "description": {
          "type": "string"
        },
        "format": {
          "type": "string"
        },
        "groupIds": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "mandateId": {
          "type": "string"
        },
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicyFilter"
          }
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "title": "ReportConfigCreateRequest"
    },
    "ReportConfigResponse": {
      "type": "object",
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Account"
          }
        },
        "cloudType": {
          "type": "string"
        },
        "createdOn": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "format": {
          "type": "string"
        },
        "groupIds": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "mandateId": {
          "type": "string"
        },
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicyFilter"
          }
        },
        "reportId": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "title": "ReportConfigResponse"
    },
    "ReportConfigUpdateRequest": {
      "type": "object",
      "properties": {
        "cloudType": {
          "type": "string"
        },
        "connectorIds": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "description": {
          "type": "string"
        },
        "format": {
          "type": "string"
        },
        "groupIds": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "mandateId": {
          "type": "string"
        },
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicyFilter"
          }
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "title": "ReportConfigUpdateRequest"
    },
    "ReportDataBaseResponse": {
      "type": "object",
      "properties": {
        "stats": {
          "$ref": "#/definitions/DataStats"
        },
        "summary": {
          "$ref": "#/definitions/DataSummary"
        }
      },
      "title": "ReportDataBaseResponse"
    },
    "ReportServiceResponse": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string"
        },
        "createdBy": {
          "type": "string"
        },
        "expiresOn": {
          "type": "string"
        },
        "fileFormat": {
          "type": "string"
        },
        "reportId": {
          "type": "string",
          "format": "uuid"
        },
        "reportName": {
          "type": "string"
        },
        "reportType": {
          "type": "string",
          "enum": [
            "ON_DEMAND"
          ]
        },
        "status": {
          "type": "string",
          "enum": [
            "GENERATED",
            "FAILED",
            "PROCESSING",
            "ACCEPTED",
            "QUEUED",
            "COMPLETED",
            "REJECTED"
          ]
        },
        "templateName": {
          "type": "string"
        }
      },
      "title": "ReportServiceResponse"
    },
    "Resource": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "file": {
          "$ref": "#/definitions/File"
        },
        "filename": {
          "type": "string"
        },
        "inputStream": {
          "$ref": "#/definitions/InputStream"
        },
        "open": {
          "type": "boolean"
        },
        "readable": {
          "type": "boolean"
        },
        "uri": {
          "$ref": "#/definitions/URI"
        },
        "url": {
          "$ref": "#/definitions/URL"
        }
      },
      "title": "Resource"
    },
    "ResponseEntity": {
      "type": "object",
      "properties": {
        "body": {
          "type": "object"
        },
        "statusCode": {
          "type": "string",
          "enum": [
            "100",
            "101",
            "102",
            "103",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "226",
            "300",
            "301",
            "302",
            "303",
            "304",
            "305",
            "307",
            "308",
            "400",
            "401",
            "402",
            "403",
            "404",
            "405",
            "406",
            "407",
            "408",
            "409",
            "410",
            "411",
            "412",
            "413",
            "414",
            "415",
            "416",
            "417",
            "418",
            "419",
            "420",
            "421",
            "422",
            "423",
            "424",
            "426",
            "428",
            "429",
            "431",
            "451",
            "500",
            "501",
            "502",
            "503",
            "504",
            "505",
            "506",
            "507",
            "508",
            "509",
            "510",
            "511"
          ]
        },
        "statusCodeValue": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "ResponseEntity"
    },
    "RuleRequest": {
      "type": "object",
      "properties": {
        "actionRequests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionRequest"
          }
        },
        "aggregate": {
          "type": "boolean"
        },
        "aggregationKey": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "durationHour": {
          "type": "integer",
          "format": "int32"
        },
        "fromHourInUTC": {
          "type": "integer",
          "format": "int32"
        },
        "fromMinuteInUTC": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "qql": {
          "type": "string"
        }
      },
      "title": "RuleRequest"
    },
    "RuleResponse": {
      "type": "object",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionUDT"
          }
        },
        "aggregate": {
          "type": "boolean"
        },
        "aggregationKey": {
          "type": "string"
        },
        "cloudType": {
          "type": "string"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "createdBy": {
          "type": "string"
        },
        "createdById": {
          "type": "string"
        },
        "days": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": {
          "type": "string"
        },
        "durationHour": {
          "type": "integer",
          "format": "int64"
        },
        "fromHourInUTC": {
          "type": "integer",
          "format": "int32"
        },
        "fromMinuteInUTC": {
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "type": "string"
        },
        "lastRun": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "qql": {
          "type": "string"
        },
        "ruleState": {
          "type": "string"
        },
        "ruleType": {
          "type": "string"
        },
        "triggerDescription": {
          "type": "string"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        },
        "updatedBy": {
          "type": "string"
        },
        "updatedById": {
          "type": "string"
        }
      },
      "title": "RuleResponse"
    },
    "RuleUpdateRequest": {
      "type": "object",
      "properties": {
        "actionRequests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionRequest"
          }
        },
        "aggregate": {
          "type": "boolean"
        },
        "aggregationKey": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "durationHour": {
          "type": "integer",
          "format": "int32"
        },
        "fromHourInUTC": {
          "type": "integer",
          "format": "int32"
        },
        "fromMinuteInUTC": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "qql": {
          "type": "string"
        }
      },
      "title": "RuleUpdateRequest"
    },
    "RunFrequency": {
      "type": "object",
      "properties": {
        "hours": {
          "type": "integer",
          "format": "int32"
        },
        "minutes": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "RunFrequency"
    },
    "SlackConnectionParam": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "string"
        },
        "webhookUri": {
          "type": "string"
        }
      },
      "title": "SlackConnectionParam"
    },
    "SlackRequest": {
      "type": "object",
      "properties": {
        "actionDescription": {
          "type": "string"
        },
        "actionName": {
          "type": "string"
        },
        "channel": {
          "type": "string"
        },
        "webhookUri": {
          "type": "string"
        }
      },
      "title": "SlackRequest"
    },
    "SlackUpdateRequest": {
      "type": "object",
      "properties": {
        "actionDescription": {
          "type": "string"
        },
        "actionName": {
          "type": "string"
        },
        "channel": {
          "type": "string"
        },
        "webhookUri": {
          "type": "string"
        }
      },
      "title": "SlackUpdateRequest"
    },
    "Sort": {
      "type": "object",
      "properties": {
        "sorted": {
          "type": "boolean"
        },
        "unsorted": {
          "type": "boolean"
        }
      },
      "title": "Sort"
    },
    "URI": {
      "type": "object",
      "properties": {
        "absolute": {
          "type": "boolean"
        },
        "authority": {
          "type": "string"
        },
        "fragment": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "opaque": {
          "type": "boolean"
        },
        "path": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        },
        "query": {
          "type": "string"
        },
        "rawAuthority": {
          "type": "string"
        },
        "rawFragment": {
          "type": "string"
        },
        "rawPath": {
          "type": "string"
        },
        "rawQuery": {
          "type": "string"
        },
        "rawSchemeSpecificPart": {
          "type": "string"
        },
        "rawUserInfo": {
          "type": "string"
        },
        "scheme": {
          "type": "string"
        },
        "schemeSpecificPart": {
          "type": "string"
        },
        "userInfo": {
          "type": "string"
        }
      },
      "title": "URI"
    },
    "URL": {
      "type": "object",
      "properties": {
        "authority": {
          "type": "string"
        },
        "content": {
          "type": "object"
        },
        "defaultPort": {
          "type": "integer",
          "format": "int32"
        },
        "file": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        },
        "protocol": {
          "type": "string"
        },
        "query": {
          "type": "string"
        },
        "ref": {
          "type": "string"
        },
        "userInfo": {
          "type": "string"
        }
      },
      "title": "URL"
    },
    "UserAccountModifyRequest": {
      "type": "object",
      "properties": {
        "add": {
          "$ref": "#/definitions/ModifyUserScopeRequest"
        },
        "remove": {
          "$ref": "#/definitions/ModifyUserScopeRequest"
        }
      },
      "title": "UserAccountModifyRequest"
    },
    "UserGroupModifyRequest": {
      "type": "object",
      "properties": {
        "add": {
          "$ref": "#/definitions/ModifyGroupScope"
        },
        "remove": {
          "$ref": "#/definitions/ModifyGroupScope"
        }
      },
      "title": "UserGroupModifyRequest"
    }
  }
}