// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RemediationActivityResponse RemediationActivityResponse
//
// swagger:model RemediationActivityResponse
type RemediationActivityResponse struct {

	// errors
	Errors string `json:"Errors,omitempty"`

	// account Id
	AccountID string `json:"accountId,omitempty"`

	// cloud type
	// Enum: [AWS AZURE GCP]
	CloudType string `json:"cloudType,omitempty"`

	// connector name
	ConnectorName string `json:"connectorName,omitempty"`

	// control Id
	ControlID int64 `json:"controlId,omitempty"`

	// control name
	ControlName string `json:"controlName,omitempty"`

	// policy name
	PolicyName string `json:"policyName,omitempty"`

	// region
	Region string `json:"region,omitempty"`

	// remediation action
	RemediationAction string `json:"remediationAction,omitempty"`

	// remediation reason
	RemediationReason string `json:"remediationReason,omitempty"`

	// resource Id
	ResourceID string `json:"resourceId,omitempty"`

	// resource type
	ResourceType string `json:"resourceType,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// triggered by
	TriggeredBy string `json:"triggeredBy,omitempty"`

	// triggered on
	// Format: date-time
	TriggeredOn strfmt.DateTime `json:"triggeredOn,omitempty"`
}

// Validate validates this remediation activity response
func (m *RemediationActivityResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggeredOn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var remediationActivityResponseTypeCloudTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AWS","AZURE","GCP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		remediationActivityResponseTypeCloudTypePropEnum = append(remediationActivityResponseTypeCloudTypePropEnum, v)
	}
}

const (

	// RemediationActivityResponseCloudTypeAWS captures enum value "AWS"
	RemediationActivityResponseCloudTypeAWS string = "AWS"

	// RemediationActivityResponseCloudTypeAZURE captures enum value "AZURE"
	RemediationActivityResponseCloudTypeAZURE string = "AZURE"

	// RemediationActivityResponseCloudTypeGCP captures enum value "GCP"
	RemediationActivityResponseCloudTypeGCP string = "GCP"
)

// prop value enum
func (m *RemediationActivityResponse) validateCloudTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, remediationActivityResponseTypeCloudTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RemediationActivityResponse) validateCloudType(formats strfmt.Registry) error {

	if swag.IsZero(m.CloudType) { // not required
		return nil
	}

	// value enum
	if err := m.validateCloudTypeEnum("cloudType", "body", m.CloudType); err != nil {
		return err
	}

	return nil
}

func (m *RemediationActivityResponse) validateTriggeredOn(formats strfmt.Registry) error {

	if swag.IsZero(m.TriggeredOn) { // not required
		return nil
	}

	if err := validate.FormatOf("triggeredOn", "body", "date-time", m.TriggeredOn.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RemediationActivityResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RemediationActivityResponse) UnmarshalBinary(b []byte) error {
	var res RemediationActivityResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
