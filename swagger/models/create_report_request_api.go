// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateReportRequestAPI CreateReportRequestApi
//
// swagger:model CreateReportRequestApi
type CreateReportRequestAPI struct {

	// cloud type
	CloudType string `json:"cloudType,omitempty"`

	// connector ids
	ConnectorIds []strfmt.UUID `json:"connectorIds"`

	// description
	Description string `json:"description,omitempty"`

	// end date
	EndDate string `json:"endDate,omitempty"`

	// format
	Format string `json:"format,omitempty"`

	// group ids
	GroupIds []strfmt.UUID `json:"groupIds"`

	// policy ids
	PolicyIds []strfmt.UUID `json:"policyIds"`

	// query
	Query string `json:"query,omitempty"`

	// report name
	ReportName string `json:"reportName,omitempty"`

	// resource results
	ResourceResults []string `json:"resourceResults"`

	// resource summary include
	ResourceSummaryInclude bool `json:"resourceSummaryInclude,omitempty"`

	// start date
	StartDate string `json:"startDate,omitempty"`
}

// Validate validates this create report request Api
func (m *CreateReportRequestAPI) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectorIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateReportRequestAPI) validateConnectorIds(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectorIds) { // not required
		return nil
	}

	for i := 0; i < len(m.ConnectorIds); i++ {

		if err := validate.FormatOf("connectorIds"+"."+strconv.Itoa(i), "body", "uuid", m.ConnectorIds[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *CreateReportRequestAPI) validateGroupIds(formats strfmt.Registry) error {

	if swag.IsZero(m.GroupIds) { // not required
		return nil
	}

	for i := 0; i < len(m.GroupIds); i++ {

		if err := validate.FormatOf("groupIds"+"."+strconv.Itoa(i), "body", "uuid", m.GroupIds[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *CreateReportRequestAPI) validatePolicyIds(formats strfmt.Registry) error {

	if swag.IsZero(m.PolicyIds) { // not required
		return nil
	}

	for i := 0; i < len(m.PolicyIds); i++ {

		if err := validate.FormatOf("policyIds"+"."+strconv.Itoa(i), "body", "uuid", m.PolicyIds[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

var createReportRequestApiResourceResultsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PASS","FAIL","PASS_WITH_EXCEPTION","PASSE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createReportRequestApiResourceResultsItemsEnum = append(createReportRequestApiResourceResultsItemsEnum, v)
	}
}

func (m *CreateReportRequestAPI) validateResourceResultsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createReportRequestApiResourceResultsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateReportRequestAPI) validateResourceResults(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceResults) { // not required
		return nil
	}

	for i := 0; i < len(m.ResourceResults); i++ {

		// value enum
		if err := m.validateResourceResultsItemsEnum("resourceResults"+"."+strconv.Itoa(i), "body", m.ResourceResults[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateReportRequestAPI) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateReportRequestAPI) UnmarshalBinary(b []byte) error {
	var res CreateReportRequestAPI
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
