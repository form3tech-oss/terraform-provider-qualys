// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DataSummary DataSummary
//
// swagger:model DataSummary
type DataSummary struct {

	// accounts
	Accounts []*DataAccount `json:"accounts"`

	// cloud type
	CloudType string `json:"cloudType,omitempty"`

	// controls count
	ControlsCount int64 `json:"controlsCount,omitempty"`

	// groups
	Groups []*GroupResponse `json:"groups"`

	// mandate name
	MandateName string `json:"mandateName,omitempty"`

	// mandate pass percent
	MandatePassPercent float64 `json:"mandatePassPercent,omitempty"`

	// mandates count
	MandatesCount int64 `json:"mandatesCount,omitempty"`

	// policies count
	PoliciesCount int64 `json:"policiesCount,omitempty"`

	// requirements count
	RequirementsCount int64 `json:"requirementsCount,omitempty"`

	// total evaluations count
	TotalEvaluationsCount int64 `json:"totalEvaluationsCount,omitempty"`
}

// Validate validates this data summary
func (m *DataSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataSummary) validateAccounts(formats strfmt.Registry) error {

	if swag.IsZero(m.Accounts) { // not required
		return nil
	}

	for i := 0; i < len(m.Accounts); i++ {
		if swag.IsZero(m.Accounts[i]) { // not required
			continue
		}

		if m.Accounts[i] != nil {
			if err := m.Accounts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DataSummary) validateGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.Groups) { // not required
		return nil
	}

	for i := 0; i < len(m.Groups); i++ {
		if swag.IsZero(m.Groups[i]) { // not required
			continue
		}

		if m.Groups[i] != nil {
			if err := m.Groups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataSummary) UnmarshalBinary(b []byte) error {
	var res DataSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
