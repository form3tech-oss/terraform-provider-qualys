// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RuleResponse RuleResponse
//
// swagger:model RuleResponse
type RuleResponse struct {

	// actions
	Actions []*ActionUDT `json:"actions"`

	// aggregate
	Aggregate bool `json:"aggregate,omitempty"`

	// aggregation key
	AggregationKey string `json:"aggregationKey,omitempty"`

	// cloud type
	CloudType string `json:"cloudType,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// created by Id
	CreatedByID string `json:"createdById,omitempty"`

	// days
	Days []int32 `json:"days"`

	// description
	Description string `json:"description,omitempty"`

	// duration hour
	DurationHour int64 `json:"durationHour,omitempty"`

	// from hour in u t c
	FromHourInUTC int32 `json:"fromHourInUTC,omitempty"`

	// from minute in u t c
	FromMinuteInUTC int32 `json:"fromMinuteInUTC,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// last run
	// Format: date-time
	LastRun strfmt.DateTime `json:"lastRun,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// qql
	Qql string `json:"qql,omitempty"`

	// rule state
	RuleState string `json:"ruleState,omitempty"`

	// rule type
	RuleType string `json:"ruleType,omitempty"`

	// trigger description
	TriggerDescription string `json:"triggerDescription,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated,omitempty"`

	// updated by
	UpdatedBy string `json:"updatedBy,omitempty"`

	// updated by Id
	UpdatedByID string `json:"updatedById,omitempty"`
}

// Validate validates this rule response
func (m *RuleResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastRun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RuleResponse) validateActions(formats strfmt.Registry) error {

	if swag.IsZero(m.Actions) { // not required
		return nil
	}

	for i := 0; i < len(m.Actions); i++ {
		if swag.IsZero(m.Actions[i]) { // not required
			continue
		}

		if m.Actions[i] != nil {
			if err := m.Actions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("actions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RuleResponse) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RuleResponse) validateLastRun(formats strfmt.Registry) error {

	if swag.IsZero(m.LastRun) { // not required
		return nil
	}

	if err := validate.FormatOf("lastRun", "body", "date-time", m.LastRun.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RuleResponse) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RuleResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RuleResponse) UnmarshalBinary(b []byte) error {
	var res RuleResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
