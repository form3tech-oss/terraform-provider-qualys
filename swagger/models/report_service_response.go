// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReportServiceResponse ReportServiceResponse
//
// swagger:model ReportServiceResponse
type ReportServiceResponse struct {

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// expires on
	ExpiresOn string `json:"expiresOn,omitempty"`

	// file format
	FileFormat string `json:"fileFormat,omitempty"`

	// report Id
	// Format: uuid
	ReportID strfmt.UUID `json:"reportId,omitempty"`

	// report name
	ReportName string `json:"reportName,omitempty"`

	// report type
	// Enum: [ON_DEMAND]
	ReportType string `json:"reportType,omitempty"`

	// status
	// Enum: [GENERATED FAILED PROCESSING ACCEPTED QUEUED COMPLETED REJECTED]
	Status string `json:"status,omitempty"`

	// template name
	TemplateName string `json:"templateName,omitempty"`
}

// Validate validates this report service response
func (m *ReportServiceResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReportID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportServiceResponse) validateReportID(formats strfmt.Registry) error {

	if swag.IsZero(m.ReportID) { // not required
		return nil
	}

	if err := validate.FormatOf("reportId", "body", "uuid", m.ReportID.String(), formats); err != nil {
		return err
	}

	return nil
}

var reportServiceResponseTypeReportTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ON_DEMAND"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		reportServiceResponseTypeReportTypePropEnum = append(reportServiceResponseTypeReportTypePropEnum, v)
	}
}

const (

	// ReportServiceResponseReportTypeONDEMAND captures enum value "ON_DEMAND"
	ReportServiceResponseReportTypeONDEMAND string = "ON_DEMAND"
)

// prop value enum
func (m *ReportServiceResponse) validateReportTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, reportServiceResponseTypeReportTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ReportServiceResponse) validateReportType(formats strfmt.Registry) error {

	if swag.IsZero(m.ReportType) { // not required
		return nil
	}

	// value enum
	if err := m.validateReportTypeEnum("reportType", "body", m.ReportType); err != nil {
		return err
	}

	return nil
}

var reportServiceResponseTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GENERATED","FAILED","PROCESSING","ACCEPTED","QUEUED","COMPLETED","REJECTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		reportServiceResponseTypeStatusPropEnum = append(reportServiceResponseTypeStatusPropEnum, v)
	}
}

const (

	// ReportServiceResponseStatusGENERATED captures enum value "GENERATED"
	ReportServiceResponseStatusGENERATED string = "GENERATED"

	// ReportServiceResponseStatusFAILED captures enum value "FAILED"
	ReportServiceResponseStatusFAILED string = "FAILED"

	// ReportServiceResponseStatusPROCESSING captures enum value "PROCESSING"
	ReportServiceResponseStatusPROCESSING string = "PROCESSING"

	// ReportServiceResponseStatusACCEPTED captures enum value "ACCEPTED"
	ReportServiceResponseStatusACCEPTED string = "ACCEPTED"

	// ReportServiceResponseStatusQUEUED captures enum value "QUEUED"
	ReportServiceResponseStatusQUEUED string = "QUEUED"

	// ReportServiceResponseStatusCOMPLETED captures enum value "COMPLETED"
	ReportServiceResponseStatusCOMPLETED string = "COMPLETED"

	// ReportServiceResponseStatusREJECTED captures enum value "REJECTED"
	ReportServiceResponseStatusREJECTED string = "REJECTED"
)

// prop value enum
func (m *ReportServiceResponse) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, reportServiceResponseTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ReportServiceResponse) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReportServiceResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportServiceResponse) UnmarshalBinary(b []byte) error {
	var res ReportServiceResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
