// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ActionResponse ActionResponse
//
// swagger:model ActionResponse
type ActionResponse struct {

	// action type
	// Enum: [qemail slack pagerduty]
	ActionType string `json:"actionType,omitempty"`

	// active rules
	ActiveRules int64 `json:"activeRules,omitempty"`

	// alert
	Alert string `json:"alert,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// created by Id
	CreatedByID string `json:"createdById,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// disabled rules
	DisabledRules int64 `json:"disabledRules,omitempty"`

	// email from address
	EmailFromAddress string `json:"emailFromAddress,omitempty"`

	// email recipients
	EmailRecipients []string `json:"emailRecipients"`

	// email reply to
	EmailReplyTo string `json:"emailReplyTo,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// pagerduty client
	PagerdutyClient string `json:"pagerdutyClient,omitempty"`

	// pagerduty event type
	PagerdutyEventType string `json:"pagerdutyEventType,omitempty"`

	// pagerduty service key
	PagerdutyServiceKey string `json:"pagerdutyServiceKey,omitempty"`

	// slack channel
	SlackChannel string `json:"slackChannel,omitempty"`

	// slack webhook Uri
	SlackWebhookURI string `json:"slackWebhookUri,omitempty"`

	// smtp host
	SMTPHost string `json:"smtpHost,omitempty"`

	// smtp password
	SMTPPassword string `json:"smtpPassword,omitempty"`

	// smtp port
	SMTPPort int32 `json:"smtpPort,omitempty"`

	// smtp user name
	SMTPUserName string `json:"smtpUserName,omitempty"`

	// subject
	Subject string `json:"subject,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated,omitempty"`

	// updated by
	UpdatedBy string `json:"updatedBy,omitempty"`

	// updated by Id
	UpdatedByID string `json:"updatedById,omitempty"`
}

// Validate validates this action response
func (m *ActionResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var actionResponseTypeActionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["qemail","slack","pagerduty"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		actionResponseTypeActionTypePropEnum = append(actionResponseTypeActionTypePropEnum, v)
	}
}

const (

	// ActionResponseActionTypeQemail captures enum value "qemail"
	ActionResponseActionTypeQemail string = "qemail"

	// ActionResponseActionTypeSlack captures enum value "slack"
	ActionResponseActionTypeSlack string = "slack"

	// ActionResponseActionTypePagerduty captures enum value "pagerduty"
	ActionResponseActionTypePagerduty string = "pagerduty"
)

// prop value enum
func (m *ActionResponse) validateActionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, actionResponseTypeActionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ActionResponse) validateActionType(formats strfmt.Registry) error {

	if swag.IsZero(m.ActionType) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionTypeEnum("actionType", "body", m.ActionType); err != nil {
		return err
	}

	return nil
}

func (m *ActionResponse) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ActionResponse) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ActionResponse) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ActionResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ActionResponse) UnmarshalBinary(b []byte) error {
	var res ActionResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
