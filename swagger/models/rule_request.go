// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RuleRequest RuleRequest
//
// swagger:model RuleRequest
type RuleRequest struct {

	// action requests
	ActionRequests []*ActionRequest `json:"actionRequests"`

	// aggregate
	Aggregate bool `json:"aggregate,omitempty"`

	// aggregation key
	AggregationKey string `json:"aggregationKey,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// duration hour
	DurationHour int32 `json:"durationHour,omitempty"`

	// from hour in u t c
	FromHourInUTC int32 `json:"fromHourInUTC,omitempty"`

	// from minute in u t c
	FromMinuteInUTC int32 `json:"fromMinuteInUTC,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// qql
	Qql string `json:"qql,omitempty"`
}

// Validate validates this rule request
func (m *RuleRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionRequests(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RuleRequest) validateActionRequests(formats strfmt.Registry) error {

	if swag.IsZero(m.ActionRequests) { // not required
		return nil
	}

	for i := 0; i < len(m.ActionRequests); i++ {
		if swag.IsZero(m.ActionRequests[i]) { // not required
			continue
		}

		if m.ActionRequests[i] != nil {
			if err := m.ActionRequests[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("actionRequests" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RuleRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RuleRequest) UnmarshalBinary(b []byte) error {
	var res RuleRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
