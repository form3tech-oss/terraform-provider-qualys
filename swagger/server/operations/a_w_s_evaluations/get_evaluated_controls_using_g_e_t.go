/* #nosec */ // Code generated by go-swagger; DO NOT EDIT.

package a_w_s_evaluations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetEvaluatedControlsUsingGETHandlerFunc turns a function with the right signature into a get evaluated controls using g e t handler
type GetEvaluatedControlsUsingGETHandlerFunc func(GetEvaluatedControlsUsingGETParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetEvaluatedControlsUsingGETHandlerFunc) Handle(params GetEvaluatedControlsUsingGETParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetEvaluatedControlsUsingGETHandler interface for that can handle valid get evaluated controls using g e t params
type GetEvaluatedControlsUsingGETHandler interface {
	Handle(GetEvaluatedControlsUsingGETParams, interface{}) middleware.Responder
}

// NewGetEvaluatedControlsUsingGET creates a new http.Handler for the get evaluated controls using g e t operation
func NewGetEvaluatedControlsUsingGET(ctx *middleware.Context, handler GetEvaluatedControlsUsingGETHandler) *GetEvaluatedControlsUsingGET {
	return &GetEvaluatedControlsUsingGET{Context: ctx, Handler: handler}
}

/*GetEvaluatedControlsUsingGET swagger:route GET /rest/v1/aws/evaluations/{accountId} AWS Evaluations getEvaluatedControlsUsingGET

Get the list of evaluations as per the account for AWS Controls

*/
type GetEvaluatedControlsUsingGET struct {
	Context *middleware.Context
	Handler GetEvaluatedControlsUsingGETHandler
}

func (o *GetEvaluatedControlsUsingGET) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetEvaluatedControlsUsingGETParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
