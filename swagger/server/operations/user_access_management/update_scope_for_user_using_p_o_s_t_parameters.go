/* #nosec */ // Code generated by go-swagger; DO NOT EDIT.

package user_access_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"

	"github.com/form3tech-oss/terraform-provider-qualys/swagger/models"
)

// NewUpdateScopeForUserUsingPOSTParams creates a new UpdateScopeForUserUsingPOSTParams object
// no default values defined in spec.
func NewUpdateScopeForUserUsingPOSTParams() UpdateScopeForUserUsingPOSTParams {

	return UpdateScopeForUserUsingPOSTParams{}
}

// UpdateScopeForUserUsingPOSTParams contains all the bound params for the update scope for user using p o s t operation
// typically these are obtained from a http.Request
//
// swagger:parameters updateScopeForUserUsingPOST
type UpdateScopeForUserUsingPOSTParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Cloud type
	  Required: true
	  In: query
	*/
	CloudType string
	/*Scope to be updated for User
	  Required: true
	  In: body
	*/
	UserAccountModifyRequest *models.UserAccountModifyRequest
	/*User name for which to modify scope
	  Required: true
	  In: path
	*/
	UserName string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewUpdateScopeForUserUsingPOSTParams() beforehand.
func (o *UpdateScopeForUserUsingPOSTParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qCloudType, qhkCloudType, _ := qs.GetOK("cloudType")
	if err := o.bindCloudType(qCloudType, qhkCloudType, route.Formats); err != nil {
		res = append(res, err)
	}

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body models.UserAccountModifyRequest
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("userAccountModifyRequest", "body", ""))
			} else {
				res = append(res, errors.NewParseError("userAccountModifyRequest", "body", "", err))
			}
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.UserAccountModifyRequest = &body
			}
		}
	} else {
		res = append(res, errors.Required("userAccountModifyRequest", "body", ""))
	}
	rUserName, rhkUserName, _ := route.Params.GetOK("userName")
	if err := o.bindUserName(rUserName, rhkUserName, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCloudType binds and validates parameter CloudType from query.
func (o *UpdateScopeForUserUsingPOSTParams) bindCloudType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("cloudType", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("cloudType", "query", raw); err != nil {
		return err
	}

	o.CloudType = raw

	if err := o.validateCloudType(formats); err != nil {
		return err
	}

	return nil
}

// validateCloudType carries on validations for parameter CloudType
func (o *UpdateScopeForUserUsingPOSTParams) validateCloudType(formats strfmt.Registry) error {

	if err := validate.EnumCase("cloudType", "query", o.CloudType, []interface{}{"AWS", "AZURE", "GCP"}, true); err != nil {
		return err
	}

	return nil
}

// bindUserName binds and validates parameter UserName from path.
func (o *UpdateScopeForUserUsingPOSTParams) bindUserName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.UserName = raw

	return nil
}
