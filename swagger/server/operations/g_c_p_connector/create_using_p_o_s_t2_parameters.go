/* #nosec */ // Code generated by go-swagger; DO NOT EDIT.

package g_c_p_connector

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"mime/multipart"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewCreateUsingPOST2Params creates a new CreateUsingPOST2Params object
// no default values defined in spec.
func NewCreateUsingPOST2Params() CreateUsingPOST2Params {

	return CreateUsingPOST2Params{}
}

// CreateUsingPOST2Params contains all the bound params for the create using p o s t 2 operation
// typically these are obtained from a http.Request
//
// swagger:parameters createUsingPOST_2
type CreateUsingPOST2Params struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Provide the <a href="/cloudview/help/index.htm#t=connector%2Fgcp_v1%2Fgcp_config_download.htm" target="_blank">configuration file</a>.
	  Required: true
	  In: formData
	*/
	ConfigFile io.ReadCloser
	/*Description of the connector
	  In: formData
	*/
	Description *string
	/*Name of the connector
	  Required: true
	  In: formData
	*/
	Name string
	/*Polling frequency in hours
	  In: formData
	*/
	PollingFrequencyInHrs *string
	/*Polling frequency in minutes
	  In: formData
	*/
	PollingFrequencyInMinutes *string
	/*Project Id
	  Required: true
	  In: formData
	*/
	ProjectID string
	/*Enable Remediation
	  In: formData
	*/
	RemediationEnabled *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewCreateUsingPOST2Params() beforehand.
func (o *CreateUsingPOST2Params) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(32 << 20); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	configFile, configFileHeader, err := r.FormFile("configFile")
	if err != nil {
		res = append(res, errors.New(400, "reading file %q failed: %v", "configFile", err))
	} else if err := o.bindConfigFile(configFile, configFileHeader); err != nil {
		// Required: true
		res = append(res, err)
	} else {
		o.ConfigFile = &runtime.File{Data: configFile, Header: configFileHeader}
	}

	fdDescription, fdhkDescription, _ := fds.GetOK("description")
	if err := o.bindDescription(fdDescription, fdhkDescription, route.Formats); err != nil {
		res = append(res, err)
	}

	fdName, fdhkName, _ := fds.GetOK("name")
	if err := o.bindName(fdName, fdhkName, route.Formats); err != nil {
		res = append(res, err)
	}

	fdPollingFrequencyInHrs, fdhkPollingFrequencyInHrs, _ := fds.GetOK("pollingFrequencyInHrs")
	if err := o.bindPollingFrequencyInHrs(fdPollingFrequencyInHrs, fdhkPollingFrequencyInHrs, route.Formats); err != nil {
		res = append(res, err)
	}

	fdPollingFrequencyInMinutes, fdhkPollingFrequencyInMinutes, _ := fds.GetOK("pollingFrequencyInMinutes")
	if err := o.bindPollingFrequencyInMinutes(fdPollingFrequencyInMinutes, fdhkPollingFrequencyInMinutes, route.Formats); err != nil {
		res = append(res, err)
	}

	fdProjectID, fdhkProjectID, _ := fds.GetOK("projectId")
	if err := o.bindProjectID(fdProjectID, fdhkProjectID, route.Formats); err != nil {
		res = append(res, err)
	}

	fdRemediationEnabled, fdhkRemediationEnabled, _ := fds.GetOK("remediationEnabled")
	if err := o.bindRemediationEnabled(fdRemediationEnabled, fdhkRemediationEnabled, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindConfigFile binds file parameter ConfigFile.
//
// The only supported validations on files are MinLength and MaxLength
func (o *CreateUsingPOST2Params) bindConfigFile(file multipart.File, header *multipart.FileHeader) error {
	return nil
}

// bindDescription binds and validates parameter Description from formData.
func (o *CreateUsingPOST2Params) bindDescription(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Description = &raw

	return nil
}

// bindName binds and validates parameter Name from formData.
func (o *CreateUsingPOST2Params) bindName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("name", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("name", "formData", raw); err != nil {
		return err
	}

	o.Name = raw

	return nil
}

// bindPollingFrequencyInHrs binds and validates parameter PollingFrequencyInHrs from formData.
func (o *CreateUsingPOST2Params) bindPollingFrequencyInHrs(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.PollingFrequencyInHrs = &raw

	return nil
}

// bindPollingFrequencyInMinutes binds and validates parameter PollingFrequencyInMinutes from formData.
func (o *CreateUsingPOST2Params) bindPollingFrequencyInMinutes(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.PollingFrequencyInMinutes = &raw

	return nil
}

// bindProjectID binds and validates parameter ProjectID from formData.
func (o *CreateUsingPOST2Params) bindProjectID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("projectId", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("projectId", "formData", raw); err != nil {
		return err
	}

	o.ProjectID = raw

	return nil
}

// bindRemediationEnabled binds and validates parameter RemediationEnabled from formData.
func (o *CreateUsingPOST2Params) bindRemediationEnabled(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.RemediationEnabled = &raw

	return nil
}
