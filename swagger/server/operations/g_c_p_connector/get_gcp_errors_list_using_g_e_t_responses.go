/* #nosec */ // Code generated by go-swagger; DO NOT EDIT.

package g_c_p_connector

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/form3tech-oss/terraform-provider-qualys/swagger/models"
)

// GetGcpErrorsListUsingGETOKCode is the HTTP code returned for type GetGcpErrorsListUsingGETOK
const GetGcpErrorsListUsingGETOKCode int = 200

/*GetGcpErrorsListUsingGETOK OK

swagger:response getGcpErrorsListUsingGETOK
*/
type GetGcpErrorsListUsingGETOK struct {

	/*
	  In: Body
	*/
	Payload *models.PageImplGcpConnectorErrorResponse `json:"body,omitempty"`
}

// NewGetGcpErrorsListUsingGETOK creates GetGcpErrorsListUsingGETOK with default headers values
func NewGetGcpErrorsListUsingGETOK() *GetGcpErrorsListUsingGETOK {

	return &GetGcpErrorsListUsingGETOK{}
}

// WithPayload adds the payload to the get gcp errors list using g e t o k response
func (o *GetGcpErrorsListUsingGETOK) WithPayload(payload *models.PageImplGcpConnectorErrorResponse) *GetGcpErrorsListUsingGETOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get gcp errors list using g e t o k response
func (o *GetGcpErrorsListUsingGETOK) SetPayload(payload *models.PageImplGcpConnectorErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGcpErrorsListUsingGETOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetGcpErrorsListUsingGETBadRequestCode is the HTTP code returned for type GetGcpErrorsListUsingGETBadRequest
const GetGcpErrorsListUsingGETBadRequestCode int = 400

/*GetGcpErrorsListUsingGETBadRequest Bad Request

swagger:response getGcpErrorsListUsingGETBadRequest
*/
type GetGcpErrorsListUsingGETBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.APIErrorFacade `json:"body,omitempty"`
}

// NewGetGcpErrorsListUsingGETBadRequest creates GetGcpErrorsListUsingGETBadRequest with default headers values
func NewGetGcpErrorsListUsingGETBadRequest() *GetGcpErrorsListUsingGETBadRequest {

	return &GetGcpErrorsListUsingGETBadRequest{}
}

// WithPayload adds the payload to the get gcp errors list using g e t bad request response
func (o *GetGcpErrorsListUsingGETBadRequest) WithPayload(payload *models.APIErrorFacade) *GetGcpErrorsListUsingGETBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get gcp errors list using g e t bad request response
func (o *GetGcpErrorsListUsingGETBadRequest) SetPayload(payload *models.APIErrorFacade) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGcpErrorsListUsingGETBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetGcpErrorsListUsingGETUnauthorizedCode is the HTTP code returned for type GetGcpErrorsListUsingGETUnauthorized
const GetGcpErrorsListUsingGETUnauthorizedCode int = 401

/*GetGcpErrorsListUsingGETUnauthorized Unauthorized user

swagger:response getGcpErrorsListUsingGETUnauthorized
*/
type GetGcpErrorsListUsingGETUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.APIErrorFacade `json:"body,omitempty"`
}

// NewGetGcpErrorsListUsingGETUnauthorized creates GetGcpErrorsListUsingGETUnauthorized with default headers values
func NewGetGcpErrorsListUsingGETUnauthorized() *GetGcpErrorsListUsingGETUnauthorized {

	return &GetGcpErrorsListUsingGETUnauthorized{}
}

// WithPayload adds the payload to the get gcp errors list using g e t unauthorized response
func (o *GetGcpErrorsListUsingGETUnauthorized) WithPayload(payload *models.APIErrorFacade) *GetGcpErrorsListUsingGETUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get gcp errors list using g e t unauthorized response
func (o *GetGcpErrorsListUsingGETUnauthorized) SetPayload(payload *models.APIErrorFacade) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGcpErrorsListUsingGETUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetGcpErrorsListUsingGETForbiddenCode is the HTTP code returned for type GetGcpErrorsListUsingGETForbidden
const GetGcpErrorsListUsingGETForbiddenCode int = 403

/*GetGcpErrorsListUsingGETForbidden Forbidden

swagger:response getGcpErrorsListUsingGETForbidden
*/
type GetGcpErrorsListUsingGETForbidden struct {
}

// NewGetGcpErrorsListUsingGETForbidden creates GetGcpErrorsListUsingGETForbidden with default headers values
func NewGetGcpErrorsListUsingGETForbidden() *GetGcpErrorsListUsingGETForbidden {

	return &GetGcpErrorsListUsingGETForbidden{}
}

// WriteResponse to the client
func (o *GetGcpErrorsListUsingGETForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(403)
}

// GetGcpErrorsListUsingGETNotFoundCode is the HTTP code returned for type GetGcpErrorsListUsingGETNotFound
const GetGcpErrorsListUsingGETNotFoundCode int = 404

/*GetGcpErrorsListUsingGETNotFound Not Found

swagger:response getGcpErrorsListUsingGETNotFound
*/
type GetGcpErrorsListUsingGETNotFound struct {
}

// NewGetGcpErrorsListUsingGETNotFound creates GetGcpErrorsListUsingGETNotFound with default headers values
func NewGetGcpErrorsListUsingGETNotFound() *GetGcpErrorsListUsingGETNotFound {

	return &GetGcpErrorsListUsingGETNotFound{}
}

// WriteResponse to the client
func (o *GetGcpErrorsListUsingGETNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}
