/* #nosec */ // Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/form3tech-oss/terraform-provider-qualys/swagger/server/operations/a_w_s_connector"
	"github.com/form3tech-oss/terraform-provider-qualys/swagger/server/operations/a_w_s_evaluations"
	"github.com/form3tech-oss/terraform-provider-qualys/swagger/server/operations/assessment_reports"
	"github.com/form3tech-oss/terraform-provider-qualys/swagger/server/operations/azure_connector"
	"github.com/form3tech-oss/terraform-provider-qualys/swagger/server/operations/azure_evaluations"
	"github.com/form3tech-oss/terraform-provider-qualys/swagger/server/operations/connector_groups_management"
	"github.com/form3tech-oss/terraform-provider-qualys/swagger/server/operations/g_c_p_connector"
	"github.com/form3tech-oss/terraform-provider-qualys/swagger/server/operations/g_c_p_evaluations"
	"github.com/form3tech-oss/terraform-provider-qualys/swagger/server/operations/remediation_activity"
	"github.com/form3tech-oss/terraform-provider-qualys/swagger/server/operations/reports"
	"github.com/form3tech-oss/terraform-provider-qualys/swagger/server/operations/response_actions"
	"github.com/form3tech-oss/terraform-provider-qualys/swagger/server/operations/response_notifications"
	"github.com/form3tech-oss/terraform-provider-qualys/swagger/server/operations/response_rules"
	"github.com/form3tech-oss/terraform-provider-qualys/swagger/server/operations/user_access_management"
)

// NewCloudViewAPIsAPI creates a new CloudViewAPIs instance
func NewCloudViewAPIsAPI(spec *loads.Document) *CloudViewAPIsAPI {
	return &CloudViewAPIsAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer:          runtime.JSONConsumer(),
		MultipartformConsumer: runtime.DiscardConsumer,

		EmptyProducer: runtime.ProducerFunc(func(w io.Writer, data interface{}) error {
			return errors.NotImplemented(" producer has not yet been implemented")
		}),
		BinProducer: runtime.ByteStreamProducer(),

		ResponseRulesActivateRuleUsingPOSTHandler: response_rules.ActivateRuleUsingPOSTHandlerFunc(func(params response_rules.ActivateRuleUsingPOSTParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation response_rules.ActivateRuleUsingPOST has not yet been implemented")
		}),
		ResponseActionsCreateEmailActionUsingPOSTHandler: response_actions.CreateEmailActionUsingPOSTHandlerFunc(func(params response_actions.CreateEmailActionUsingPOSTParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation response_actions.CreateEmailActionUsingPOST has not yet been implemented")
		}),
		ResponseActionsCreatePagerActionUsingPOSTHandler: response_actions.CreatePagerActionUsingPOSTHandlerFunc(func(params response_actions.CreatePagerActionUsingPOSTParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation response_actions.CreatePagerActionUsingPOST has not yet been implemented")
		}),
		AssessmentReportsCreateReportUsingPOSTHandler: assessment_reports.CreateReportUsingPOSTHandlerFunc(func(params assessment_reports.CreateReportUsingPOSTParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation assessment_reports.CreateReportUsingPOST has not yet been implemented")
		}),
		ResponseRulesCreateRuleUsingPOSTHandler: response_rules.CreateRuleUsingPOSTHandlerFunc(func(params response_rules.CreateRuleUsingPOSTParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation response_rules.CreateRuleUsingPOST has not yet been implemented")
		}),
		ResponseActionsCreateSlackActionUsingPOSTHandler: response_actions.CreateSlackActionUsingPOSTHandlerFunc(func(params response_actions.CreateSlackActionUsingPOSTParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation response_actions.CreateSlackActionUsingPOST has not yet been implemented")
		}),
		AzureConnectorCreateUsingPOSTHandler: azure_connector.CreateUsingPOSTHandlerFunc(func(params azure_connector.CreateUsingPOSTParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation azure_connector.CreateUsingPOST has not yet been implemented")
		}),
		AwsConnectorCreateUsingPOST1Handler: a_w_s_connector.CreateUsingPOST1HandlerFunc(func(params a_w_s_connector.CreateUsingPOST1Params, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation a_w_s_connector.CreateUsingPOST1 has not yet been implemented")
		}),
		GcpConnectorCreateUsingPOST2Handler: g_c_p_connector.CreateUsingPOST2HandlerFunc(func(params g_c_p_connector.CreateUsingPOST2Params, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation g_c_p_connector.CreateUsingPOST2 has not yet been implemented")
		}),
		ConnectorGroupsManagementCreateUsingPOST3Handler: connector_groups_management.CreateUsingPOST3HandlerFunc(func(params connector_groups_management.CreateUsingPOST3Params, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation connector_groups_management.CreateUsingPOST3 has not yet been implemented")
		}),
		ReportsCreateUsingPOST4Handler: reports.CreateUsingPOST4HandlerFunc(func(params reports.CreateUsingPOST4Params, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation reports.CreateUsingPOST4 has not yet been implemented")
		}),
		ResponseActionsDeleteActionUsingPOSTHandler: response_actions.DeleteActionUsingPOSTHandlerFunc(func(params response_actions.DeleteActionUsingPOSTParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation response_actions.DeleteActionUsingPOST has not yet been implemented")
		}),
		AzureConnectorDeleteConnectorsUsingDELETEHandler: azure_connector.DeleteConnectorsUsingDELETEHandlerFunc(func(params azure_connector.DeleteConnectorsUsingDELETEParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation azure_connector.DeleteConnectorsUsingDELETE has not yet been implemented")
		}),
		AwsConnectorDeleteConnectorsUsingDELETE1Handler: a_w_s_connector.DeleteConnectorsUsingDELETE1HandlerFunc(func(params a_w_s_connector.DeleteConnectorsUsingDELETE1Params, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation a_w_s_connector.DeleteConnectorsUsingDELETE1 has not yet been implemented")
		}),
		GcpConnectorDeleteConnectorsUsingDELETE2Handler: g_c_p_connector.DeleteConnectorsUsingDELETE2HandlerFunc(func(params g_c_p_connector.DeleteConnectorsUsingDELETE2Params, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation g_c_p_connector.DeleteConnectorsUsingDELETE2 has not yet been implemented")
		}),
		ResponseRulesDeleteRuleUsingPOSTHandler: response_rules.DeleteRuleUsingPOSTHandlerFunc(func(params response_rules.DeleteRuleUsingPOSTParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation response_rules.DeleteRuleUsingPOST has not yet been implemented")
		}),
		ReportsDeleteUsingDELETEHandler: reports.DeleteUsingDELETEHandlerFunc(func(params reports.DeleteUsingDELETEParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation reports.DeleteUsingDELETE has not yet been implemented")
		}),
		AzureConnectorDisableConnectorsUsingPATCHHandler: azure_connector.DisableConnectorsUsingPATCHHandlerFunc(func(params azure_connector.DisableConnectorsUsingPATCHParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation azure_connector.DisableConnectorsUsingPATCH has not yet been implemented")
		}),
		AwsConnectorDisableConnectorsUsingPATCH1Handler: a_w_s_connector.DisableConnectorsUsingPATCH1HandlerFunc(func(params a_w_s_connector.DisableConnectorsUsingPATCH1Params, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation a_w_s_connector.DisableConnectorsUsingPATCH1 has not yet been implemented")
		}),
		GcpConnectorDisableConnectorsUsingPATCH2Handler: g_c_p_connector.DisableConnectorsUsingPATCH2HandlerFunc(func(params g_c_p_connector.DisableConnectorsUsingPATCH2Params, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation g_c_p_connector.DisableConnectorsUsingPATCH2 has not yet been implemented")
		}),
		ResponseRulesDisableRuleUsingPOSTHandler: response_rules.DisableRuleUsingPOSTHandlerFunc(func(params response_rules.DisableRuleUsingPOSTParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation response_rules.DisableRuleUsingPOST has not yet been implemented")
		}),
		AwsConnectorDownloadAwsCloudFormationTemplateUsingGETHandler: a_w_s_connector.DownloadAwsCloudFormationTemplateUsingGETHandlerFunc(func(params a_w_s_connector.DownloadAwsCloudFormationTemplateUsingGETParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation a_w_s_connector.DownloadAwsCloudFormationTemplateUsingGET has not yet been implemented")
		}),
		AssessmentReportsDownloadReportUsingGETHandler: assessment_reports.DownloadReportUsingGETHandlerFunc(func(params assessment_reports.DownloadReportUsingGETParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation assessment_reports.DownloadReportUsingGET has not yet been implemented")
		}),
		AzureConnectorEnableConnectorsUsingPATCHHandler: azure_connector.EnableConnectorsUsingPATCHHandlerFunc(func(params azure_connector.EnableConnectorsUsingPATCHParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation azure_connector.EnableConnectorsUsingPATCH has not yet been implemented")
		}),
		AwsConnectorEnableConnectorsUsingPATCH1Handler: a_w_s_connector.EnableConnectorsUsingPATCH1HandlerFunc(func(params a_w_s_connector.EnableConnectorsUsingPATCH1Params, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation a_w_s_connector.EnableConnectorsUsingPATCH1 has not yet been implemented")
		}),
		GcpConnectorEnableConnectorsUsingPATCH2Handler: g_c_p_connector.EnableConnectorsUsingPATCH2HandlerFunc(func(params g_c_p_connector.EnableConnectorsUsingPATCH2Params, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation g_c_p_connector.EnableConnectorsUsingPATCH2 has not yet been implemented")
		}),
		ResponseActionsGetActionByIDUsingGETHandler: response_actions.GetActionByIDUsingGETHandlerFunc(func(params response_actions.GetActionByIDUsingGETParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation response_actions.GetActionByIDUsingGET has not yet been implemented")
		}),
		ResponseActionsGetActionsTypesUsingGETHandler: response_actions.GetActionsTypesUsingGETHandlerFunc(func(params response_actions.GetActionsTypesUsingGETParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation response_actions.GetActionsTypesUsingGET has not yet been implemented")
		}),
		ResponseActionsGetAllActionsByFilterUsingGETHandler: response_actions.GetAllActionsByFilterUsingGETHandlerFunc(func(params response_actions.GetAllActionsByFilterUsingGETParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation response_actions.GetAllActionsByFilterUsingGET has not yet been implemented")
		}),
		ReportsGetAllMandatesUsingGETHandler: reports.GetAllMandatesUsingGETHandlerFunc(func(params reports.GetAllMandatesUsingGETParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation reports.GetAllMandatesUsingGET has not yet been implemented")
		}),
		ResponseNotificationsGetAllNotificationsUsingGETHandler: response_notifications.GetAllNotificationsUsingGETHandlerFunc(func(params response_notifications.GetAllNotificationsUsingGETParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation response_notifications.GetAllNotificationsUsingGET has not yet been implemented")
		}),
		ReportsGetAllPoliciesUsingGETHandler: reports.GetAllPoliciesUsingGETHandlerFunc(func(params reports.GetAllPoliciesUsingGETParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation reports.GetAllPoliciesUsingGET has not yet been implemented")
		}),
		ResponseRulesGetAllRulesByFilterUsingGETHandler: response_rules.GetAllRulesByFilterUsingGETHandlerFunc(func(params response_rules.GetAllRulesByFilterUsingGETParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation response_rules.GetAllRulesByFilterUsingGET has not yet been implemented")
		}),
		AwsConnectorGetAwsAccountIDUsingGETHandler: a_w_s_connector.GetAwsAccountIDUsingGETHandlerFunc(func(params a_w_s_connector.GetAwsAccountIDUsingGETParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation a_w_s_connector.GetAwsAccountIDUsingGET has not yet been implemented")
		}),
		AzureConnectorGetAzureErrorsListUsingGETHandler: azure_connector.GetAzureErrorsListUsingGETHandlerFunc(func(params azure_connector.GetAzureErrorsListUsingGETParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation azure_connector.GetAzureErrorsListUsingGET has not yet been implemented")
		}),
		ReportsGetDataUsingGETHandler: reports.GetDataUsingGETHandlerFunc(func(params reports.GetDataUsingGETParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation reports.GetDataUsingGET has not yet been implemented")
		}),
		AzureConnectorGetDetailsUsingGETHandler: azure_connector.GetDetailsUsingGETHandlerFunc(func(params azure_connector.GetDetailsUsingGETParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation azure_connector.GetDetailsUsingGET has not yet been implemented")
		}),
		AwsConnectorGetDetailsUsingGET1Handler: a_w_s_connector.GetDetailsUsingGET1HandlerFunc(func(params a_w_s_connector.GetDetailsUsingGET1Params, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation a_w_s_connector.GetDetailsUsingGET1 has not yet been implemented")
		}),
		GcpConnectorGetDetailsUsingGET2Handler: g_c_p_connector.GetDetailsUsingGET2HandlerFunc(func(params g_c_p_connector.GetDetailsUsingGET2Params, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation g_c_p_connector.GetDetailsUsingGET2 has not yet been implemented")
		}),
		AwsConnectorGetErrorsListUsingGETHandler: a_w_s_connector.GetErrorsListUsingGETHandlerFunc(func(params a_w_s_connector.GetErrorsListUsingGETParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation a_w_s_connector.GetErrorsListUsingGET has not yet been implemented")
		}),
		AwsEvaluationsGetEvaluatedControlsUsingGETHandler: a_w_s_evaluations.GetEvaluatedControlsUsingGETHandlerFunc(func(params a_w_s_evaluations.GetEvaluatedControlsUsingGETParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation a_w_s_evaluations.GetEvaluatedControlsUsingGET has not yet been implemented")
		}),
		AzureEvaluationsGetEvaluatedControlsUsingGET1Handler: azure_evaluations.GetEvaluatedControlsUsingGET1HandlerFunc(func(params azure_evaluations.GetEvaluatedControlsUsingGET1Params, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation azure_evaluations.GetEvaluatedControlsUsingGET1 has not yet been implemented")
		}),
		GcpEvaluationsGetEvaluatedControlsUsingGET2Handler: g_c_p_evaluations.GetEvaluatedControlsUsingGET2HandlerFunc(func(params g_c_p_evaluations.GetEvaluatedControlsUsingGET2Params, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation g_c_p_evaluations.GetEvaluatedControlsUsingGET2 has not yet been implemented")
		}),
		AwsEvaluationsGetEvaluatedResourcesUsingGETHandler: a_w_s_evaluations.GetEvaluatedResourcesUsingGETHandlerFunc(func(params a_w_s_evaluations.GetEvaluatedResourcesUsingGETParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation a_w_s_evaluations.GetEvaluatedResourcesUsingGET has not yet been implemented")
		}),
		AzureEvaluationsGetEvaluatedResourcesUsingGET1Handler: azure_evaluations.GetEvaluatedResourcesUsingGET1HandlerFunc(func(params azure_evaluations.GetEvaluatedResourcesUsingGET1Params, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation azure_evaluations.GetEvaluatedResourcesUsingGET1 has not yet been implemented")
		}),
		GcpEvaluationsGetEvaluatedResourcesUsingGET2Handler: g_c_p_evaluations.GetEvaluatedResourcesUsingGET2HandlerFunc(func(params g_c_p_evaluations.GetEvaluatedResourcesUsingGET2Params, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation g_c_p_evaluations.GetEvaluatedResourcesUsingGET2 has not yet been implemented")
		}),
		AwsEvaluationsGetEvaluationsStatsUsingGETHandler: a_w_s_evaluations.GetEvaluationsStatsUsingGETHandlerFunc(func(params a_w_s_evaluations.GetEvaluationsStatsUsingGETParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation a_w_s_evaluations.GetEvaluationsStatsUsingGET has not yet been implemented")
		}),
		AzureEvaluationsGetEvaluationsStatsUsingGET1Handler: azure_evaluations.GetEvaluationsStatsUsingGET1HandlerFunc(func(params azure_evaluations.GetEvaluationsStatsUsingGET1Params, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation azure_evaluations.GetEvaluationsStatsUsingGET1 has not yet been implemented")
		}),
		GcpEvaluationsGetEvaluationsStatsUsingGET2Handler: g_c_p_evaluations.GetEvaluationsStatsUsingGET2HandlerFunc(func(params g_c_p_evaluations.GetEvaluationsStatsUsingGET2Params, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation g_c_p_evaluations.GetEvaluationsStatsUsingGET2 has not yet been implemented")
		}),
		GcpConnectorGetGcpErrorsListUsingGETHandler: g_c_p_connector.GetGcpErrorsListUsingGETHandlerFunc(func(params g_c_p_connector.GetGcpErrorsListUsingGETParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation g_c_p_connector.GetGcpErrorsListUsingGET has not yet been implemented")
		}),
		ConnectorGroupsManagementGetGroupUsingGETHandler: connector_groups_management.GetGroupUsingGETHandlerFunc(func(params connector_groups_management.GetGroupUsingGETParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation connector_groups_management.GetGroupUsingGET has not yet been implemented")
		}),
		AzureConnectorGetListUsingGETHandler: azure_connector.GetListUsingGETHandlerFunc(func(params azure_connector.GetListUsingGETParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation azure_connector.GetListUsingGET has not yet been implemented")
		}),
		AwsConnectorGetListUsingGET1Handler: a_w_s_connector.GetListUsingGET1HandlerFunc(func(params a_w_s_connector.GetListUsingGET1Params, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation a_w_s_connector.GetListUsingGET1 has not yet been implemented")
		}),
		GcpConnectorGetListUsingGET2Handler: g_c_p_connector.GetListUsingGET2HandlerFunc(func(params g_c_p_connector.GetListUsingGET2Params, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation g_c_p_connector.GetListUsingGET2 has not yet been implemented")
		}),
		ReportsGetListUsingGET3Handler: reports.GetListUsingGET3HandlerFunc(func(params reports.GetListUsingGET3Params, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation reports.GetListUsingGET3 has not yet been implemented")
		}),
		AssessmentReportsGetListUsingGET4Handler: assessment_reports.GetListUsingGET4HandlerFunc(func(params assessment_reports.GetListUsingGET4Params, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation assessment_reports.GetListUsingGET4 has not yet been implemented")
		}),
		ResponseNotificationsGetNotificationByIDUsingGETHandler: response_notifications.GetNotificationByIDUsingGETHandlerFunc(func(params response_notifications.GetNotificationByIDUsingGETParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation response_notifications.GetNotificationByIDUsingGET has not yet been implemented")
		}),
		RemediationActivityGetRemediationHistoryUsingGETHandler: remediation_activity.GetRemediationHistoryUsingGETHandlerFunc(func(params remediation_activity.GetRemediationHistoryUsingGETParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation remediation_activity.GetRemediationHistoryUsingGET has not yet been implemented")
		}),
		ResponseRulesGetRuleByIDUsingGETHandler: response_rules.GetRuleByIDUsingGETHandlerFunc(func(params response_rules.GetRuleByIDUsingGETParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation response_rules.GetRuleByIDUsingGET has not yet been implemented")
		}),
		UserAccessManagementGetUserScopeUsingGETHandler: user_access_management.GetUserScopeUsingGETHandlerFunc(func(params user_access_management.GetUserScopeUsingGETParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user_access_management.GetUserScopeUsingGET has not yet been implemented")
		}),
		ReportsGetUsingGETHandler: reports.GetUsingGETHandlerFunc(func(params reports.GetUsingGETParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation reports.GetUsingGET has not yet been implemented")
		}),
		ConnectorGroupsManagementListGroupsUsingGETHandler: connector_groups_management.ListGroupsUsingGETHandlerFunc(func(params connector_groups_management.ListGroupsUsingGETParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation connector_groups_management.ListGroupsUsingGET has not yet been implemented")
		}),
		AssessmentReportsRerunReportUsingPOSTHandler: assessment_reports.RerunReportUsingPOSTHandlerFunc(func(params assessment_reports.RerunReportUsingPOSTParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation assessment_reports.RerunReportUsingPOST has not yet been implemented")
		}),
		AzureConnectorRunConnectorUsingPOSTHandler: azure_connector.RunConnectorUsingPOSTHandlerFunc(func(params azure_connector.RunConnectorUsingPOSTParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation azure_connector.RunConnectorUsingPOST has not yet been implemented")
		}),
		AwsConnectorRunConnectorUsingPOST1Handler: a_w_s_connector.RunConnectorUsingPOST1HandlerFunc(func(params a_w_s_connector.RunConnectorUsingPOST1Params, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation a_w_s_connector.RunConnectorUsingPOST1 has not yet been implemented")
		}),
		GcpConnectorRunConnectorUsingPOST2Handler: g_c_p_connector.RunConnectorUsingPOST2HandlerFunc(func(params g_c_p_connector.RunConnectorUsingPOST2Params, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation g_c_p_connector.RunConnectorUsingPOST2 has not yet been implemented")
		}),
		ResponseActionsTestSlackActionUsingPOSTHandler: response_actions.TestSlackActionUsingPOSTHandlerFunc(func(params response_actions.TestSlackActionUsingPOSTParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation response_actions.TestSlackActionUsingPOST has not yet been implemented")
		}),
		ResponseActionsTestSlackActionUsingPOST1Handler: response_actions.TestSlackActionUsingPOST1HandlerFunc(func(params response_actions.TestSlackActionUsingPOST1Params, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation response_actions.TestSlackActionUsingPOST1 has not yet been implemented")
		}),
		AzureConnectorUpdateConnectorUsingPUTHandler: azure_connector.UpdateConnectorUsingPUTHandlerFunc(func(params azure_connector.UpdateConnectorUsingPUTParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation azure_connector.UpdateConnectorUsingPUT has not yet been implemented")
		}),
		AwsConnectorUpdateConnectorUsingPUT1Handler: a_w_s_connector.UpdateConnectorUsingPUT1HandlerFunc(func(params a_w_s_connector.UpdateConnectorUsingPUT1Params, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation a_w_s_connector.UpdateConnectorUsingPUT1 has not yet been implemented")
		}),
		GcpConnectorUpdateConnectorUsingPUT2Handler: g_c_p_connector.UpdateConnectorUsingPUT2HandlerFunc(func(params g_c_p_connector.UpdateConnectorUsingPUT2Params, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation g_c_p_connector.UpdateConnectorUsingPUT2 has not yet been implemented")
		}),
		ResponseActionsUpdateEmailActionUsingPUTHandler: response_actions.UpdateEmailActionUsingPUTHandlerFunc(func(params response_actions.UpdateEmailActionUsingPUTParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation response_actions.UpdateEmailActionUsingPUT has not yet been implemented")
		}),
		UserAccessManagementUpdateGroupScopeForUserUsingPOSTHandler: user_access_management.UpdateGroupScopeForUserUsingPOSTHandlerFunc(func(params user_access_management.UpdateGroupScopeForUserUsingPOSTParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user_access_management.UpdateGroupScopeForUserUsingPOST has not yet been implemented")
		}),
		ConnectorGroupsManagementUpdateGroupUsingPOSTHandler: connector_groups_management.UpdateGroupUsingPOSTHandlerFunc(func(params connector_groups_management.UpdateGroupUsingPOSTParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation connector_groups_management.UpdateGroupUsingPOST has not yet been implemented")
		}),
		ResponseActionsUpdatePagerActionUsingPUTHandler: response_actions.UpdatePagerActionUsingPUTHandlerFunc(func(params response_actions.UpdatePagerActionUsingPUTParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation response_actions.UpdatePagerActionUsingPUT has not yet been implemented")
		}),
		ResponseRulesUpdateRuleUsingPUTHandler: response_rules.UpdateRuleUsingPUTHandlerFunc(func(params response_rules.UpdateRuleUsingPUTParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation response_rules.UpdateRuleUsingPUT has not yet been implemented")
		}),
		UserAccessManagementUpdateScopeForUserUsingPOSTHandler: user_access_management.UpdateScopeForUserUsingPOSTHandlerFunc(func(params user_access_management.UpdateScopeForUserUsingPOSTParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation user_access_management.UpdateScopeForUserUsingPOST has not yet been implemented")
		}),
		ResponseActionsUpdateSlackActionUsingPUTHandler: response_actions.UpdateSlackActionUsingPUTHandlerFunc(func(params response_actions.UpdateSlackActionUsingPUTParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation response_actions.UpdateSlackActionUsingPUT has not yet been implemented")
		}),
		ReportsUpdateUsingPATCHHandler: reports.UpdateUsingPATCHHandlerFunc(func(params reports.UpdateUsingPATCHParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation reports.UpdateUsingPATCH has not yet been implemented")
		}),

		// Applies when the Authorization header is set with the Basic scheme
		BasicAuthAuth: func(user string, pass string) (interface{}, error) {
			return nil, errors.NotImplemented("basic auth  (basicAuth) has not yet been implemented")
		},
		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*CloudViewAPIsAPI Many features of the CloudView are available through REST APIs. <br/>Access support information at <a href="https://www.qualys.com/support/" target="_blank">www.qualys.com/support</a>. <br/><br/><b>Permissions:</b> <br/>User must have the CloudView module enabled and api access permission. */
type CloudViewAPIsAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer
	// MultipartformConsumer registers a consumer for the following mime types:
	//   - multipart/form-data
	MultipartformConsumer runtime.Consumer

	// EmptyProducer registers a producer for the following mime types:
	//   - */*
	EmptyProducer runtime.Producer
	// BinProducer registers a producer for the following mime types:
	//   - application/octet-stream
	BinProducer runtime.Producer

	// BasicAuthAuth registers a function that takes username and password and returns a principal
	// it performs authentication with basic auth
	BasicAuthAuth func(string, string) (interface{}, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// ResponseRulesActivateRuleUsingPOSTHandler sets the operation handler for the activate rule using p o s t operation
	ResponseRulesActivateRuleUsingPOSTHandler response_rules.ActivateRuleUsingPOSTHandler
	// ResponseActionsCreateEmailActionUsingPOSTHandler sets the operation handler for the create email action using p o s t operation
	ResponseActionsCreateEmailActionUsingPOSTHandler response_actions.CreateEmailActionUsingPOSTHandler
	// ResponseActionsCreatePagerActionUsingPOSTHandler sets the operation handler for the create pager action using p o s t operation
	ResponseActionsCreatePagerActionUsingPOSTHandler response_actions.CreatePagerActionUsingPOSTHandler
	// AssessmentReportsCreateReportUsingPOSTHandler sets the operation handler for the create report using p o s t operation
	AssessmentReportsCreateReportUsingPOSTHandler assessment_reports.CreateReportUsingPOSTHandler
	// ResponseRulesCreateRuleUsingPOSTHandler sets the operation handler for the create rule using p o s t operation
	ResponseRulesCreateRuleUsingPOSTHandler response_rules.CreateRuleUsingPOSTHandler
	// ResponseActionsCreateSlackActionUsingPOSTHandler sets the operation handler for the create slack action using p o s t operation
	ResponseActionsCreateSlackActionUsingPOSTHandler response_actions.CreateSlackActionUsingPOSTHandler
	// AzureConnectorCreateUsingPOSTHandler sets the operation handler for the create using p o s t operation
	AzureConnectorCreateUsingPOSTHandler azure_connector.CreateUsingPOSTHandler
	// AwsConnectorCreateUsingPOST1Handler sets the operation handler for the create using p o s t 1 operation
	AwsConnectorCreateUsingPOST1Handler a_w_s_connector.CreateUsingPOST1Handler
	// GcpConnectorCreateUsingPOST2Handler sets the operation handler for the create using p o s t 2 operation
	GcpConnectorCreateUsingPOST2Handler g_c_p_connector.CreateUsingPOST2Handler
	// ConnectorGroupsManagementCreateUsingPOST3Handler sets the operation handler for the create using p o s t 3 operation
	ConnectorGroupsManagementCreateUsingPOST3Handler connector_groups_management.CreateUsingPOST3Handler
	// ReportsCreateUsingPOST4Handler sets the operation handler for the create using p o s t 4 operation
	ReportsCreateUsingPOST4Handler reports.CreateUsingPOST4Handler
	// ResponseActionsDeleteActionUsingPOSTHandler sets the operation handler for the delete action using p o s t operation
	ResponseActionsDeleteActionUsingPOSTHandler response_actions.DeleteActionUsingPOSTHandler
	// AzureConnectorDeleteConnectorsUsingDELETEHandler sets the operation handler for the delete connectors using d e l e t e operation
	AzureConnectorDeleteConnectorsUsingDELETEHandler azure_connector.DeleteConnectorsUsingDELETEHandler
	// AwsConnectorDeleteConnectorsUsingDELETE1Handler sets the operation handler for the delete connectors using d e l e t e 1 operation
	AwsConnectorDeleteConnectorsUsingDELETE1Handler a_w_s_connector.DeleteConnectorsUsingDELETE1Handler
	// GcpConnectorDeleteConnectorsUsingDELETE2Handler sets the operation handler for the delete connectors using d e l e t e 2 operation
	GcpConnectorDeleteConnectorsUsingDELETE2Handler g_c_p_connector.DeleteConnectorsUsingDELETE2Handler
	// ResponseRulesDeleteRuleUsingPOSTHandler sets the operation handler for the delete rule using p o s t operation
	ResponseRulesDeleteRuleUsingPOSTHandler response_rules.DeleteRuleUsingPOSTHandler
	// ReportsDeleteUsingDELETEHandler sets the operation handler for the delete using d e l e t e operation
	ReportsDeleteUsingDELETEHandler reports.DeleteUsingDELETEHandler
	// AzureConnectorDisableConnectorsUsingPATCHHandler sets the operation handler for the disable connectors using p a t c h operation
	AzureConnectorDisableConnectorsUsingPATCHHandler azure_connector.DisableConnectorsUsingPATCHHandler
	// AwsConnectorDisableConnectorsUsingPATCH1Handler sets the operation handler for the disable connectors using p a t c h 1 operation
	AwsConnectorDisableConnectorsUsingPATCH1Handler a_w_s_connector.DisableConnectorsUsingPATCH1Handler
	// GcpConnectorDisableConnectorsUsingPATCH2Handler sets the operation handler for the disable connectors using p a t c h 2 operation
	GcpConnectorDisableConnectorsUsingPATCH2Handler g_c_p_connector.DisableConnectorsUsingPATCH2Handler
	// ResponseRulesDisableRuleUsingPOSTHandler sets the operation handler for the disable rule using p o s t operation
	ResponseRulesDisableRuleUsingPOSTHandler response_rules.DisableRuleUsingPOSTHandler
	// AwsConnectorDownloadAwsCloudFormationTemplateUsingGETHandler sets the operation handler for the download aws cloud formation template using g e t operation
	AwsConnectorDownloadAwsCloudFormationTemplateUsingGETHandler a_w_s_connector.DownloadAwsCloudFormationTemplateUsingGETHandler
	// AssessmentReportsDownloadReportUsingGETHandler sets the operation handler for the download report using g e t operation
	AssessmentReportsDownloadReportUsingGETHandler assessment_reports.DownloadReportUsingGETHandler
	// AzureConnectorEnableConnectorsUsingPATCHHandler sets the operation handler for the enable connectors using p a t c h operation
	AzureConnectorEnableConnectorsUsingPATCHHandler azure_connector.EnableConnectorsUsingPATCHHandler
	// AwsConnectorEnableConnectorsUsingPATCH1Handler sets the operation handler for the enable connectors using p a t c h 1 operation
	AwsConnectorEnableConnectorsUsingPATCH1Handler a_w_s_connector.EnableConnectorsUsingPATCH1Handler
	// GcpConnectorEnableConnectorsUsingPATCH2Handler sets the operation handler for the enable connectors using p a t c h 2 operation
	GcpConnectorEnableConnectorsUsingPATCH2Handler g_c_p_connector.EnableConnectorsUsingPATCH2Handler
	// ResponseActionsGetActionByIDUsingGETHandler sets the operation handler for the get action by Id using g e t operation
	ResponseActionsGetActionByIDUsingGETHandler response_actions.GetActionByIDUsingGETHandler
	// ResponseActionsGetActionsTypesUsingGETHandler sets the operation handler for the get actions types using g e t operation
	ResponseActionsGetActionsTypesUsingGETHandler response_actions.GetActionsTypesUsingGETHandler
	// ResponseActionsGetAllActionsByFilterUsingGETHandler sets the operation handler for the get all actions by filter using g e t operation
	ResponseActionsGetAllActionsByFilterUsingGETHandler response_actions.GetAllActionsByFilterUsingGETHandler
	// ReportsGetAllMandatesUsingGETHandler sets the operation handler for the get all mandates using g e t operation
	ReportsGetAllMandatesUsingGETHandler reports.GetAllMandatesUsingGETHandler
	// ResponseNotificationsGetAllNotificationsUsingGETHandler sets the operation handler for the get all notifications using g e t operation
	ResponseNotificationsGetAllNotificationsUsingGETHandler response_notifications.GetAllNotificationsUsingGETHandler
	// ReportsGetAllPoliciesUsingGETHandler sets the operation handler for the get all policies using g e t operation
	ReportsGetAllPoliciesUsingGETHandler reports.GetAllPoliciesUsingGETHandler
	// ResponseRulesGetAllRulesByFilterUsingGETHandler sets the operation handler for the get all rules by filter using g e t operation
	ResponseRulesGetAllRulesByFilterUsingGETHandler response_rules.GetAllRulesByFilterUsingGETHandler
	// AwsConnectorGetAwsAccountIDUsingGETHandler sets the operation handler for the get aws account Id using g e t operation
	AwsConnectorGetAwsAccountIDUsingGETHandler a_w_s_connector.GetAwsAccountIDUsingGETHandler
	// AzureConnectorGetAzureErrorsListUsingGETHandler sets the operation handler for the get azure errors list using g e t operation
	AzureConnectorGetAzureErrorsListUsingGETHandler azure_connector.GetAzureErrorsListUsingGETHandler
	// ReportsGetDataUsingGETHandler sets the operation handler for the get data using g e t operation
	ReportsGetDataUsingGETHandler reports.GetDataUsingGETHandler
	// AzureConnectorGetDetailsUsingGETHandler sets the operation handler for the get details using g e t operation
	AzureConnectorGetDetailsUsingGETHandler azure_connector.GetDetailsUsingGETHandler
	// AwsConnectorGetDetailsUsingGET1Handler sets the operation handler for the get details using g e t 1 operation
	AwsConnectorGetDetailsUsingGET1Handler a_w_s_connector.GetDetailsUsingGET1Handler
	// GcpConnectorGetDetailsUsingGET2Handler sets the operation handler for the get details using g e t 2 operation
	GcpConnectorGetDetailsUsingGET2Handler g_c_p_connector.GetDetailsUsingGET2Handler
	// AwsConnectorGetErrorsListUsingGETHandler sets the operation handler for the get errors list using g e t operation
	AwsConnectorGetErrorsListUsingGETHandler a_w_s_connector.GetErrorsListUsingGETHandler
	// AwsEvaluationsGetEvaluatedControlsUsingGETHandler sets the operation handler for the get evaluated controls using g e t operation
	AwsEvaluationsGetEvaluatedControlsUsingGETHandler a_w_s_evaluations.GetEvaluatedControlsUsingGETHandler
	// AzureEvaluationsGetEvaluatedControlsUsingGET1Handler sets the operation handler for the get evaluated controls using g e t 1 operation
	AzureEvaluationsGetEvaluatedControlsUsingGET1Handler azure_evaluations.GetEvaluatedControlsUsingGET1Handler
	// GcpEvaluationsGetEvaluatedControlsUsingGET2Handler sets the operation handler for the get evaluated controls using g e t 2 operation
	GcpEvaluationsGetEvaluatedControlsUsingGET2Handler g_c_p_evaluations.GetEvaluatedControlsUsingGET2Handler
	// AwsEvaluationsGetEvaluatedResourcesUsingGETHandler sets the operation handler for the get evaluated resources using g e t operation
	AwsEvaluationsGetEvaluatedResourcesUsingGETHandler a_w_s_evaluations.GetEvaluatedResourcesUsingGETHandler
	// AzureEvaluationsGetEvaluatedResourcesUsingGET1Handler sets the operation handler for the get evaluated resources using g e t 1 operation
	AzureEvaluationsGetEvaluatedResourcesUsingGET1Handler azure_evaluations.GetEvaluatedResourcesUsingGET1Handler
	// GcpEvaluationsGetEvaluatedResourcesUsingGET2Handler sets the operation handler for the get evaluated resources using g e t 2 operation
	GcpEvaluationsGetEvaluatedResourcesUsingGET2Handler g_c_p_evaluations.GetEvaluatedResourcesUsingGET2Handler
	// AwsEvaluationsGetEvaluationsStatsUsingGETHandler sets the operation handler for the get evaluations stats using g e t operation
	AwsEvaluationsGetEvaluationsStatsUsingGETHandler a_w_s_evaluations.GetEvaluationsStatsUsingGETHandler
	// AzureEvaluationsGetEvaluationsStatsUsingGET1Handler sets the operation handler for the get evaluations stats using g e t 1 operation
	AzureEvaluationsGetEvaluationsStatsUsingGET1Handler azure_evaluations.GetEvaluationsStatsUsingGET1Handler
	// GcpEvaluationsGetEvaluationsStatsUsingGET2Handler sets the operation handler for the get evaluations stats using g e t 2 operation
	GcpEvaluationsGetEvaluationsStatsUsingGET2Handler g_c_p_evaluations.GetEvaluationsStatsUsingGET2Handler
	// GcpConnectorGetGcpErrorsListUsingGETHandler sets the operation handler for the get gcp errors list using g e t operation
	GcpConnectorGetGcpErrorsListUsingGETHandler g_c_p_connector.GetGcpErrorsListUsingGETHandler
	// ConnectorGroupsManagementGetGroupUsingGETHandler sets the operation handler for the get group using g e t operation
	ConnectorGroupsManagementGetGroupUsingGETHandler connector_groups_management.GetGroupUsingGETHandler
	// AzureConnectorGetListUsingGETHandler sets the operation handler for the get list using g e t operation
	AzureConnectorGetListUsingGETHandler azure_connector.GetListUsingGETHandler
	// AwsConnectorGetListUsingGET1Handler sets the operation handler for the get list using g e t 1 operation
	AwsConnectorGetListUsingGET1Handler a_w_s_connector.GetListUsingGET1Handler
	// GcpConnectorGetListUsingGET2Handler sets the operation handler for the get list using g e t 2 operation
	GcpConnectorGetListUsingGET2Handler g_c_p_connector.GetListUsingGET2Handler
	// ReportsGetListUsingGET3Handler sets the operation handler for the get list using g e t 3 operation
	ReportsGetListUsingGET3Handler reports.GetListUsingGET3Handler
	// AssessmentReportsGetListUsingGET4Handler sets the operation handler for the get list using g e t 4 operation
	AssessmentReportsGetListUsingGET4Handler assessment_reports.GetListUsingGET4Handler
	// ResponseNotificationsGetNotificationByIDUsingGETHandler sets the operation handler for the get notification by Id using g e t operation
	ResponseNotificationsGetNotificationByIDUsingGETHandler response_notifications.GetNotificationByIDUsingGETHandler
	// RemediationActivityGetRemediationHistoryUsingGETHandler sets the operation handler for the get remediation history using g e t operation
	RemediationActivityGetRemediationHistoryUsingGETHandler remediation_activity.GetRemediationHistoryUsingGETHandler
	// ResponseRulesGetRuleByIDUsingGETHandler sets the operation handler for the get rule by Id using g e t operation
	ResponseRulesGetRuleByIDUsingGETHandler response_rules.GetRuleByIDUsingGETHandler
	// UserAccessManagementGetUserScopeUsingGETHandler sets the operation handler for the get user scope using g e t operation
	UserAccessManagementGetUserScopeUsingGETHandler user_access_management.GetUserScopeUsingGETHandler
	// ReportsGetUsingGETHandler sets the operation handler for the get using g e t operation
	ReportsGetUsingGETHandler reports.GetUsingGETHandler
	// ConnectorGroupsManagementListGroupsUsingGETHandler sets the operation handler for the list groups using g e t operation
	ConnectorGroupsManagementListGroupsUsingGETHandler connector_groups_management.ListGroupsUsingGETHandler
	// AssessmentReportsRerunReportUsingPOSTHandler sets the operation handler for the rerun report using p o s t operation
	AssessmentReportsRerunReportUsingPOSTHandler assessment_reports.RerunReportUsingPOSTHandler
	// AzureConnectorRunConnectorUsingPOSTHandler sets the operation handler for the run connector using p o s t operation
	AzureConnectorRunConnectorUsingPOSTHandler azure_connector.RunConnectorUsingPOSTHandler
	// AwsConnectorRunConnectorUsingPOST1Handler sets the operation handler for the run connector using p o s t 1 operation
	AwsConnectorRunConnectorUsingPOST1Handler a_w_s_connector.RunConnectorUsingPOST1Handler
	// GcpConnectorRunConnectorUsingPOST2Handler sets the operation handler for the run connector using p o s t 2 operation
	GcpConnectorRunConnectorUsingPOST2Handler g_c_p_connector.RunConnectorUsingPOST2Handler
	// ResponseActionsTestSlackActionUsingPOSTHandler sets the operation handler for the test slack action using p o s t operation
	ResponseActionsTestSlackActionUsingPOSTHandler response_actions.TestSlackActionUsingPOSTHandler
	// ResponseActionsTestSlackActionUsingPOST1Handler sets the operation handler for the test slack action using p o s t 1 operation
	ResponseActionsTestSlackActionUsingPOST1Handler response_actions.TestSlackActionUsingPOST1Handler
	// AzureConnectorUpdateConnectorUsingPUTHandler sets the operation handler for the update connector using p u t operation
	AzureConnectorUpdateConnectorUsingPUTHandler azure_connector.UpdateConnectorUsingPUTHandler
	// AwsConnectorUpdateConnectorUsingPUT1Handler sets the operation handler for the update connector using p u t 1 operation
	AwsConnectorUpdateConnectorUsingPUT1Handler a_w_s_connector.UpdateConnectorUsingPUT1Handler
	// GcpConnectorUpdateConnectorUsingPUT2Handler sets the operation handler for the update connector using p u t 2 operation
	GcpConnectorUpdateConnectorUsingPUT2Handler g_c_p_connector.UpdateConnectorUsingPUT2Handler
	// ResponseActionsUpdateEmailActionUsingPUTHandler sets the operation handler for the update email action using p u t operation
	ResponseActionsUpdateEmailActionUsingPUTHandler response_actions.UpdateEmailActionUsingPUTHandler
	// UserAccessManagementUpdateGroupScopeForUserUsingPOSTHandler sets the operation handler for the update group scope for user using p o s t operation
	UserAccessManagementUpdateGroupScopeForUserUsingPOSTHandler user_access_management.UpdateGroupScopeForUserUsingPOSTHandler
	// ConnectorGroupsManagementUpdateGroupUsingPOSTHandler sets the operation handler for the update group using p o s t operation
	ConnectorGroupsManagementUpdateGroupUsingPOSTHandler connector_groups_management.UpdateGroupUsingPOSTHandler
	// ResponseActionsUpdatePagerActionUsingPUTHandler sets the operation handler for the update pager action using p u t operation
	ResponseActionsUpdatePagerActionUsingPUTHandler response_actions.UpdatePagerActionUsingPUTHandler
	// ResponseRulesUpdateRuleUsingPUTHandler sets the operation handler for the update rule using p u t operation
	ResponseRulesUpdateRuleUsingPUTHandler response_rules.UpdateRuleUsingPUTHandler
	// UserAccessManagementUpdateScopeForUserUsingPOSTHandler sets the operation handler for the update scope for user using p o s t operation
	UserAccessManagementUpdateScopeForUserUsingPOSTHandler user_access_management.UpdateScopeForUserUsingPOSTHandler
	// ResponseActionsUpdateSlackActionUsingPUTHandler sets the operation handler for the update slack action using p u t operation
	ResponseActionsUpdateSlackActionUsingPUTHandler response_actions.UpdateSlackActionUsingPUTHandler
	// ReportsUpdateUsingPATCHHandler sets the operation handler for the update using p a t c h operation
	ReportsUpdateUsingPATCHHandler reports.UpdateUsingPATCHHandler
	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *CloudViewAPIsAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *CloudViewAPIsAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *CloudViewAPIsAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *CloudViewAPIsAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *CloudViewAPIsAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *CloudViewAPIsAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *CloudViewAPIsAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *CloudViewAPIsAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *CloudViewAPIsAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the CloudViewAPIsAPI
func (o *CloudViewAPIsAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}
	if o.MultipartformConsumer == nil {
		unregistered = append(unregistered, "MultipartformConsumer")
	}

	if o.EmptyProducer == nil {
		unregistered = append(unregistered, "EmptyProducer")
	}
	if o.BinProducer == nil {
		unregistered = append(unregistered, "BinProducer")
	}

	if o.BasicAuthAuth == nil {
		unregistered = append(unregistered, "BasicAuthAuth")
	}

	if o.ResponseRulesActivateRuleUsingPOSTHandler == nil {
		unregistered = append(unregistered, "response_rules.ActivateRuleUsingPOSTHandler")
	}
	if o.ResponseActionsCreateEmailActionUsingPOSTHandler == nil {
		unregistered = append(unregistered, "response_actions.CreateEmailActionUsingPOSTHandler")
	}
	if o.ResponseActionsCreatePagerActionUsingPOSTHandler == nil {
		unregistered = append(unregistered, "response_actions.CreatePagerActionUsingPOSTHandler")
	}
	if o.AssessmentReportsCreateReportUsingPOSTHandler == nil {
		unregistered = append(unregistered, "assessment_reports.CreateReportUsingPOSTHandler")
	}
	if o.ResponseRulesCreateRuleUsingPOSTHandler == nil {
		unregistered = append(unregistered, "response_rules.CreateRuleUsingPOSTHandler")
	}
	if o.ResponseActionsCreateSlackActionUsingPOSTHandler == nil {
		unregistered = append(unregistered, "response_actions.CreateSlackActionUsingPOSTHandler")
	}
	if o.AzureConnectorCreateUsingPOSTHandler == nil {
		unregistered = append(unregistered, "azure_connector.CreateUsingPOSTHandler")
	}
	if o.AwsConnectorCreateUsingPOST1Handler == nil {
		unregistered = append(unregistered, "a_w_s_connector.CreateUsingPOST1Handler")
	}
	if o.GcpConnectorCreateUsingPOST2Handler == nil {
		unregistered = append(unregistered, "g_c_p_connector.CreateUsingPOST2Handler")
	}
	if o.ConnectorGroupsManagementCreateUsingPOST3Handler == nil {
		unregistered = append(unregistered, "connector_groups_management.CreateUsingPOST3Handler")
	}
	if o.ReportsCreateUsingPOST4Handler == nil {
		unregistered = append(unregistered, "reports.CreateUsingPOST4Handler")
	}
	if o.ResponseActionsDeleteActionUsingPOSTHandler == nil {
		unregistered = append(unregistered, "response_actions.DeleteActionUsingPOSTHandler")
	}
	if o.AzureConnectorDeleteConnectorsUsingDELETEHandler == nil {
		unregistered = append(unregistered, "azure_connector.DeleteConnectorsUsingDELETEHandler")
	}
	if o.AwsConnectorDeleteConnectorsUsingDELETE1Handler == nil {
		unregistered = append(unregistered, "a_w_s_connector.DeleteConnectorsUsingDELETE1Handler")
	}
	if o.GcpConnectorDeleteConnectorsUsingDELETE2Handler == nil {
		unregistered = append(unregistered, "g_c_p_connector.DeleteConnectorsUsingDELETE2Handler")
	}
	if o.ResponseRulesDeleteRuleUsingPOSTHandler == nil {
		unregistered = append(unregistered, "response_rules.DeleteRuleUsingPOSTHandler")
	}
	if o.ReportsDeleteUsingDELETEHandler == nil {
		unregistered = append(unregistered, "reports.DeleteUsingDELETEHandler")
	}
	if o.AzureConnectorDisableConnectorsUsingPATCHHandler == nil {
		unregistered = append(unregistered, "azure_connector.DisableConnectorsUsingPATCHHandler")
	}
	if o.AwsConnectorDisableConnectorsUsingPATCH1Handler == nil {
		unregistered = append(unregistered, "a_w_s_connector.DisableConnectorsUsingPATCH1Handler")
	}
	if o.GcpConnectorDisableConnectorsUsingPATCH2Handler == nil {
		unregistered = append(unregistered, "g_c_p_connector.DisableConnectorsUsingPATCH2Handler")
	}
	if o.ResponseRulesDisableRuleUsingPOSTHandler == nil {
		unregistered = append(unregistered, "response_rules.DisableRuleUsingPOSTHandler")
	}
	if o.AwsConnectorDownloadAwsCloudFormationTemplateUsingGETHandler == nil {
		unregistered = append(unregistered, "a_w_s_connector.DownloadAwsCloudFormationTemplateUsingGETHandler")
	}
	if o.AssessmentReportsDownloadReportUsingGETHandler == nil {
		unregistered = append(unregistered, "assessment_reports.DownloadReportUsingGETHandler")
	}
	if o.AzureConnectorEnableConnectorsUsingPATCHHandler == nil {
		unregistered = append(unregistered, "azure_connector.EnableConnectorsUsingPATCHHandler")
	}
	if o.AwsConnectorEnableConnectorsUsingPATCH1Handler == nil {
		unregistered = append(unregistered, "a_w_s_connector.EnableConnectorsUsingPATCH1Handler")
	}
	if o.GcpConnectorEnableConnectorsUsingPATCH2Handler == nil {
		unregistered = append(unregistered, "g_c_p_connector.EnableConnectorsUsingPATCH2Handler")
	}
	if o.ResponseActionsGetActionByIDUsingGETHandler == nil {
		unregistered = append(unregistered, "response_actions.GetActionByIDUsingGETHandler")
	}
	if o.ResponseActionsGetActionsTypesUsingGETHandler == nil {
		unregistered = append(unregistered, "response_actions.GetActionsTypesUsingGETHandler")
	}
	if o.ResponseActionsGetAllActionsByFilterUsingGETHandler == nil {
		unregistered = append(unregistered, "response_actions.GetAllActionsByFilterUsingGETHandler")
	}
	if o.ReportsGetAllMandatesUsingGETHandler == nil {
		unregistered = append(unregistered, "reports.GetAllMandatesUsingGETHandler")
	}
	if o.ResponseNotificationsGetAllNotificationsUsingGETHandler == nil {
		unregistered = append(unregistered, "response_notifications.GetAllNotificationsUsingGETHandler")
	}
	if o.ReportsGetAllPoliciesUsingGETHandler == nil {
		unregistered = append(unregistered, "reports.GetAllPoliciesUsingGETHandler")
	}
	if o.ResponseRulesGetAllRulesByFilterUsingGETHandler == nil {
		unregistered = append(unregistered, "response_rules.GetAllRulesByFilterUsingGETHandler")
	}
	if o.AwsConnectorGetAwsAccountIDUsingGETHandler == nil {
		unregistered = append(unregistered, "a_w_s_connector.GetAwsAccountIDUsingGETHandler")
	}
	if o.AzureConnectorGetAzureErrorsListUsingGETHandler == nil {
		unregistered = append(unregistered, "azure_connector.GetAzureErrorsListUsingGETHandler")
	}
	if o.ReportsGetDataUsingGETHandler == nil {
		unregistered = append(unregistered, "reports.GetDataUsingGETHandler")
	}
	if o.AzureConnectorGetDetailsUsingGETHandler == nil {
		unregistered = append(unregistered, "azure_connector.GetDetailsUsingGETHandler")
	}
	if o.AwsConnectorGetDetailsUsingGET1Handler == nil {
		unregistered = append(unregistered, "a_w_s_connector.GetDetailsUsingGET1Handler")
	}
	if o.GcpConnectorGetDetailsUsingGET2Handler == nil {
		unregistered = append(unregistered, "g_c_p_connector.GetDetailsUsingGET2Handler")
	}
	if o.AwsConnectorGetErrorsListUsingGETHandler == nil {
		unregistered = append(unregistered, "a_w_s_connector.GetErrorsListUsingGETHandler")
	}
	if o.AwsEvaluationsGetEvaluatedControlsUsingGETHandler == nil {
		unregistered = append(unregistered, "a_w_s_evaluations.GetEvaluatedControlsUsingGETHandler")
	}
	if o.AzureEvaluationsGetEvaluatedControlsUsingGET1Handler == nil {
		unregistered = append(unregistered, "azure_evaluations.GetEvaluatedControlsUsingGET1Handler")
	}
	if o.GcpEvaluationsGetEvaluatedControlsUsingGET2Handler == nil {
		unregistered = append(unregistered, "g_c_p_evaluations.GetEvaluatedControlsUsingGET2Handler")
	}
	if o.AwsEvaluationsGetEvaluatedResourcesUsingGETHandler == nil {
		unregistered = append(unregistered, "a_w_s_evaluations.GetEvaluatedResourcesUsingGETHandler")
	}
	if o.AzureEvaluationsGetEvaluatedResourcesUsingGET1Handler == nil {
		unregistered = append(unregistered, "azure_evaluations.GetEvaluatedResourcesUsingGET1Handler")
	}
	if o.GcpEvaluationsGetEvaluatedResourcesUsingGET2Handler == nil {
		unregistered = append(unregistered, "g_c_p_evaluations.GetEvaluatedResourcesUsingGET2Handler")
	}
	if o.AwsEvaluationsGetEvaluationsStatsUsingGETHandler == nil {
		unregistered = append(unregistered, "a_w_s_evaluations.GetEvaluationsStatsUsingGETHandler")
	}
	if o.AzureEvaluationsGetEvaluationsStatsUsingGET1Handler == nil {
		unregistered = append(unregistered, "azure_evaluations.GetEvaluationsStatsUsingGET1Handler")
	}
	if o.GcpEvaluationsGetEvaluationsStatsUsingGET2Handler == nil {
		unregistered = append(unregistered, "g_c_p_evaluations.GetEvaluationsStatsUsingGET2Handler")
	}
	if o.GcpConnectorGetGcpErrorsListUsingGETHandler == nil {
		unregistered = append(unregistered, "g_c_p_connector.GetGcpErrorsListUsingGETHandler")
	}
	if o.ConnectorGroupsManagementGetGroupUsingGETHandler == nil {
		unregistered = append(unregistered, "connector_groups_management.GetGroupUsingGETHandler")
	}
	if o.AzureConnectorGetListUsingGETHandler == nil {
		unregistered = append(unregistered, "azure_connector.GetListUsingGETHandler")
	}
	if o.AwsConnectorGetListUsingGET1Handler == nil {
		unregistered = append(unregistered, "a_w_s_connector.GetListUsingGET1Handler")
	}
	if o.GcpConnectorGetListUsingGET2Handler == nil {
		unregistered = append(unregistered, "g_c_p_connector.GetListUsingGET2Handler")
	}
	if o.ReportsGetListUsingGET3Handler == nil {
		unregistered = append(unregistered, "reports.GetListUsingGET3Handler")
	}
	if o.AssessmentReportsGetListUsingGET4Handler == nil {
		unregistered = append(unregistered, "assessment_reports.GetListUsingGET4Handler")
	}
	if o.ResponseNotificationsGetNotificationByIDUsingGETHandler == nil {
		unregistered = append(unregistered, "response_notifications.GetNotificationByIDUsingGETHandler")
	}
	if o.RemediationActivityGetRemediationHistoryUsingGETHandler == nil {
		unregistered = append(unregistered, "remediation_activity.GetRemediationHistoryUsingGETHandler")
	}
	if o.ResponseRulesGetRuleByIDUsingGETHandler == nil {
		unregistered = append(unregistered, "response_rules.GetRuleByIDUsingGETHandler")
	}
	if o.UserAccessManagementGetUserScopeUsingGETHandler == nil {
		unregistered = append(unregistered, "user_access_management.GetUserScopeUsingGETHandler")
	}
	if o.ReportsGetUsingGETHandler == nil {
		unregistered = append(unregistered, "reports.GetUsingGETHandler")
	}
	if o.ConnectorGroupsManagementListGroupsUsingGETHandler == nil {
		unregistered = append(unregistered, "connector_groups_management.ListGroupsUsingGETHandler")
	}
	if o.AssessmentReportsRerunReportUsingPOSTHandler == nil {
		unregistered = append(unregistered, "assessment_reports.RerunReportUsingPOSTHandler")
	}
	if o.AzureConnectorRunConnectorUsingPOSTHandler == nil {
		unregistered = append(unregistered, "azure_connector.RunConnectorUsingPOSTHandler")
	}
	if o.AwsConnectorRunConnectorUsingPOST1Handler == nil {
		unregistered = append(unregistered, "a_w_s_connector.RunConnectorUsingPOST1Handler")
	}
	if o.GcpConnectorRunConnectorUsingPOST2Handler == nil {
		unregistered = append(unregistered, "g_c_p_connector.RunConnectorUsingPOST2Handler")
	}
	if o.ResponseActionsTestSlackActionUsingPOSTHandler == nil {
		unregistered = append(unregistered, "response_actions.TestSlackActionUsingPOSTHandler")
	}
	if o.ResponseActionsTestSlackActionUsingPOST1Handler == nil {
		unregistered = append(unregistered, "response_actions.TestSlackActionUsingPOST1Handler")
	}
	if o.AzureConnectorUpdateConnectorUsingPUTHandler == nil {
		unregistered = append(unregistered, "azure_connector.UpdateConnectorUsingPUTHandler")
	}
	if o.AwsConnectorUpdateConnectorUsingPUT1Handler == nil {
		unregistered = append(unregistered, "a_w_s_connector.UpdateConnectorUsingPUT1Handler")
	}
	if o.GcpConnectorUpdateConnectorUsingPUT2Handler == nil {
		unregistered = append(unregistered, "g_c_p_connector.UpdateConnectorUsingPUT2Handler")
	}
	if o.ResponseActionsUpdateEmailActionUsingPUTHandler == nil {
		unregistered = append(unregistered, "response_actions.UpdateEmailActionUsingPUTHandler")
	}
	if o.UserAccessManagementUpdateGroupScopeForUserUsingPOSTHandler == nil {
		unregistered = append(unregistered, "user_access_management.UpdateGroupScopeForUserUsingPOSTHandler")
	}
	if o.ConnectorGroupsManagementUpdateGroupUsingPOSTHandler == nil {
		unregistered = append(unregistered, "connector_groups_management.UpdateGroupUsingPOSTHandler")
	}
	if o.ResponseActionsUpdatePagerActionUsingPUTHandler == nil {
		unregistered = append(unregistered, "response_actions.UpdatePagerActionUsingPUTHandler")
	}
	if o.ResponseRulesUpdateRuleUsingPUTHandler == nil {
		unregistered = append(unregistered, "response_rules.UpdateRuleUsingPUTHandler")
	}
	if o.UserAccessManagementUpdateScopeForUserUsingPOSTHandler == nil {
		unregistered = append(unregistered, "user_access_management.UpdateScopeForUserUsingPOSTHandler")
	}
	if o.ResponseActionsUpdateSlackActionUsingPUTHandler == nil {
		unregistered = append(unregistered, "response_actions.UpdateSlackActionUsingPUTHandler")
	}
	if o.ReportsUpdateUsingPATCHHandler == nil {
		unregistered = append(unregistered, "reports.UpdateUsingPATCHHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *CloudViewAPIsAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *CloudViewAPIsAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {
		case "basicAuth":
			result[name] = o.BasicAuthenticator(o.BasicAuthAuth)

		}
	}
	return result
}

// Authorizer returns the registered authorizer
func (o *CloudViewAPIsAPI) Authorizer() runtime.Authorizer {
	return o.APIAuthorizer
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *CloudViewAPIsAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		case "multipart/form-data":
			result["multipart/form-data"] = o.MultipartformConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *CloudViewAPIsAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "*/*":
			result["*/*"] = o.EmptyProducer
		case "application/octet-stream":
			result["application/octet-stream"] = o.BinProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *CloudViewAPIsAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the cloud view a p is API
func (o *CloudViewAPIsAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *CloudViewAPIsAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/rest/v1/rules/enable"] = response_rules.NewActivateRuleUsingPOST(o.context, o.ResponseRulesActivateRuleUsingPOSTHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/rest/v1/actions/email"] = response_actions.NewCreateEmailActionUsingPOST(o.context, o.ResponseActionsCreateEmailActionUsingPOSTHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/rest/v1/actions/pagerduty"] = response_actions.NewCreatePagerActionUsingPOST(o.context, o.ResponseActionsCreatePagerActionUsingPOSTHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/rest/v1/report/assessment/create"] = assessment_reports.NewCreateReportUsingPOST(o.context, o.AssessmentReportsCreateReportUsingPOSTHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/rest/v1/rules"] = response_rules.NewCreateRuleUsingPOST(o.context, o.ResponseRulesCreateRuleUsingPOSTHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/rest/v1/actions/slack"] = response_actions.NewCreateSlackActionUsingPOST(o.context, o.ResponseActionsCreateSlackActionUsingPOSTHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/rest/v1/azure/connectors"] = azure_connector.NewCreateUsingPOST(o.context, o.AzureConnectorCreateUsingPOSTHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/rest/v1/aws/connectors"] = a_w_s_connector.NewCreateUsingPOST1(o.context, o.AwsConnectorCreateUsingPOST1Handler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/rest/v1/gcp/connectors"] = g_c_p_connector.NewCreateUsingPOST2(o.context, o.GcpConnectorCreateUsingPOST2Handler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/rest/v1/groups"] = connector_groups_management.NewCreateUsingPOST3(o.context, o.ConnectorGroupsManagementCreateUsingPOST3Handler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/rest/v1/reports"] = reports.NewCreateUsingPOST4(o.context, o.ReportsCreateUsingPOST4Handler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/rest/v1/actions/delete"] = response_actions.NewDeleteActionUsingPOST(o.context, o.ResponseActionsDeleteActionUsingPOSTHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/rest/v1/azure/connectors"] = azure_connector.NewDeleteConnectorsUsingDELETE(o.context, o.AzureConnectorDeleteConnectorsUsingDELETEHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/rest/v1/aws/connectors"] = a_w_s_connector.NewDeleteConnectorsUsingDELETE1(o.context, o.AwsConnectorDeleteConnectorsUsingDELETE1Handler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/rest/v1/gcp/connectors"] = g_c_p_connector.NewDeleteConnectorsUsingDELETE2(o.context, o.GcpConnectorDeleteConnectorsUsingDELETE2Handler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/rest/v1/rules/delete"] = response_rules.NewDeleteRuleUsingPOST(o.context, o.ResponseRulesDeleteRuleUsingPOSTHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/rest/v1/reports"] = reports.NewDeleteUsingDELETE(o.context, o.ReportsDeleteUsingDELETEHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/rest/v1/azure/connectors/connectors/disable"] = azure_connector.NewDisableConnectorsUsingPATCH(o.context, o.AzureConnectorDisableConnectorsUsingPATCHHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/rest/v1/aws/connectors/connectors/disable"] = a_w_s_connector.NewDisableConnectorsUsingPATCH1(o.context, o.AwsConnectorDisableConnectorsUsingPATCH1Handler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/rest/v1/gcp/connectors/connectors/disable"] = g_c_p_connector.NewDisableConnectorsUsingPATCH2(o.context, o.GcpConnectorDisableConnectorsUsingPATCH2Handler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/rest/v1/rules/disable"] = response_rules.NewDisableRuleUsingPOST(o.context, o.ResponseRulesDisableRuleUsingPOSTHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rest/v1/aws/connectors/aws/download"] = a_w_s_connector.NewDownloadAwsCloudFormationTemplateUsingGET(o.context, o.AwsConnectorDownloadAwsCloudFormationTemplateUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rest/v1/report/assessment/{reportId}/download"] = assessment_reports.NewDownloadReportUsingGET(o.context, o.AssessmentReportsDownloadReportUsingGETHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/rest/v1/azure/connectors/connectors/enable"] = azure_connector.NewEnableConnectorsUsingPATCH(o.context, o.AzureConnectorEnableConnectorsUsingPATCHHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/rest/v1/aws/connectors/connectors/enable"] = a_w_s_connector.NewEnableConnectorsUsingPATCH1(o.context, o.AwsConnectorEnableConnectorsUsingPATCH1Handler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/rest/v1/gcp/connectors/connectors/enable"] = g_c_p_connector.NewEnableConnectorsUsingPATCH2(o.context, o.GcpConnectorEnableConnectorsUsingPATCH2Handler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rest/v1/actions/{actionId}"] = response_actions.NewGetActionByIDUsingGET(o.context, o.ResponseActionsGetActionByIDUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rest/v1/actions/types"] = response_actions.NewGetActionsTypesUsingGET(o.context, o.ResponseActionsGetActionsTypesUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rest/v1/actions"] = response_actions.NewGetAllActionsByFilterUsingGET(o.context, o.ResponseActionsGetAllActionsByFilterUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rest/v1/reports/mandates"] = reports.NewGetAllMandatesUsingGET(o.context, o.ReportsGetAllMandatesUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rest/v1/activities"] = response_notifications.NewGetAllNotificationsUsingGET(o.context, o.ResponseNotificationsGetAllNotificationsUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rest/v1/reports/policies"] = reports.NewGetAllPoliciesUsingGET(o.context, o.ReportsGetAllPoliciesUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rest/v1/rules"] = response_rules.NewGetAllRulesByFilterUsingGET(o.context, o.ResponseRulesGetAllRulesByFilterUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rest/v1/aws/connectors/awsBaseAccountId"] = a_w_s_connector.NewGetAwsAccountIDUsingGET(o.context, o.AwsConnectorGetAwsAccountIDUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rest/v1/azure/connectors/{connectorId}/errors"] = azure_connector.NewGetAzureErrorsListUsingGET(o.context, o.AzureConnectorGetAzureErrorsListUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rest/v1/reports/report_data/{reportId}"] = reports.NewGetDataUsingGET(o.context, o.ReportsGetDataUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rest/v1/azure/connectors/{connectorId}"] = azure_connector.NewGetDetailsUsingGET(o.context, o.AzureConnectorGetDetailsUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rest/v1/aws/connectors/{connectorId}"] = a_w_s_connector.NewGetDetailsUsingGET1(o.context, o.AwsConnectorGetDetailsUsingGET1Handler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rest/v1/gcp/connectors/{connectorId}"] = g_c_p_connector.NewGetDetailsUsingGET2(o.context, o.GcpConnectorGetDetailsUsingGET2Handler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rest/v1/aws/connectors/{connectorId}/errors"] = a_w_s_connector.NewGetErrorsListUsingGET(o.context, o.AwsConnectorGetErrorsListUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rest/v1/aws/evaluations/{accountId}"] = a_w_s_evaluations.NewGetEvaluatedControlsUsingGET(o.context, o.AwsEvaluationsGetEvaluatedControlsUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rest/v1/azure/evaluations/{subscriptionId}"] = azure_evaluations.NewGetEvaluatedControlsUsingGET1(o.context, o.AzureEvaluationsGetEvaluatedControlsUsingGET1Handler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rest/v1/gcp/evaluations/{projectId}"] = g_c_p_evaluations.NewGetEvaluatedControlsUsingGET2(o.context, o.GcpEvaluationsGetEvaluatedControlsUsingGET2Handler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rest/v1/aws/evaluations/{accountId}/resources/{controlId}"] = a_w_s_evaluations.NewGetEvaluatedResourcesUsingGET(o.context, o.AwsEvaluationsGetEvaluatedResourcesUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rest/v1/azure/evaluations/{subscriptionId}/resources/{controlId}"] = azure_evaluations.NewGetEvaluatedResourcesUsingGET1(o.context, o.AzureEvaluationsGetEvaluatedResourcesUsingGET1Handler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rest/v1/gcp/evaluations/{projectId}/resources/{controlId}"] = g_c_p_evaluations.NewGetEvaluatedResourcesUsingGET2(o.context, o.GcpEvaluationsGetEvaluatedResourcesUsingGET2Handler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rest/v1/aws/evaluations/stats/{controlId}/{connectorId}"] = a_w_s_evaluations.NewGetEvaluationsStatsUsingGET(o.context, o.AwsEvaluationsGetEvaluationsStatsUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rest/v1/azure/evaluations/stats/{controlId}/{connectorId}"] = azure_evaluations.NewGetEvaluationsStatsUsingGET1(o.context, o.AzureEvaluationsGetEvaluationsStatsUsingGET1Handler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rest/v1/gcp/evaluations/stats/{controlId}/{connectorId}"] = g_c_p_evaluations.NewGetEvaluationsStatsUsingGET2(o.context, o.GcpEvaluationsGetEvaluationsStatsUsingGET2Handler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rest/v1/gcp/connectors/{connectorId}/errors"] = g_c_p_connector.NewGetGcpErrorsListUsingGET(o.context, o.GcpConnectorGetGcpErrorsListUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rest/v1/groups/{groupUuid}"] = connector_groups_management.NewGetGroupUsingGET(o.context, o.ConnectorGroupsManagementGetGroupUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rest/v1/azure/connectors"] = azure_connector.NewGetListUsingGET(o.context, o.AzureConnectorGetListUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rest/v1/aws/connectors"] = a_w_s_connector.NewGetListUsingGET1(o.context, o.AwsConnectorGetListUsingGET1Handler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rest/v1/gcp/connectors"] = g_c_p_connector.NewGetListUsingGET2(o.context, o.GcpConnectorGetListUsingGET2Handler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rest/v1/reports"] = reports.NewGetListUsingGET3(o.context, o.ReportsGetListUsingGET3Handler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rest/v1/report/assessment/list"] = assessment_reports.NewGetListUsingGET4(o.context, o.AssessmentReportsGetListUsingGET4Handler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rest/v1/activities/{activityId}"] = response_notifications.NewGetNotificationByIDUsingGET(o.context, o.ResponseNotificationsGetNotificationByIDUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rest/v1/remediation/activity"] = remediation_activity.NewGetRemediationHistoryUsingGET(o.context, o.RemediationActivityGetRemediationHistoryUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rest/v1/rules/{ruleId}"] = response_rules.NewGetRuleByIDUsingGET(o.context, o.ResponseRulesGetRuleByIDUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rest/v1/users/{userName}/scope"] = user_access_management.NewGetUserScopeUsingGET(o.context, o.UserAccessManagementGetUserScopeUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rest/v1/reports/{reportId}"] = reports.NewGetUsingGET(o.context, o.ReportsGetUsingGETHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rest/v1/groups"] = connector_groups_management.NewListGroupsUsingGET(o.context, o.ConnectorGroupsManagementListGroupsUsingGETHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/rest/v1/report/assessment/{reportId}/rerun"] = assessment_reports.NewRerunReportUsingPOST(o.context, o.AssessmentReportsRerunReportUsingPOSTHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/rest/v1/azure/connectors/run"] = azure_connector.NewRunConnectorUsingPOST(o.context, o.AzureConnectorRunConnectorUsingPOSTHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/rest/v1/aws/connectors/run"] = a_w_s_connector.NewRunConnectorUsingPOST1(o.context, o.AwsConnectorRunConnectorUsingPOST1Handler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/rest/v1/gcp/connectors/run"] = g_c_p_connector.NewRunConnectorUsingPOST2(o.context, o.GcpConnectorRunConnectorUsingPOST2Handler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/rest/v1/actions/pagerduty/test"] = response_actions.NewTestSlackActionUsingPOST(o.context, o.ResponseActionsTestSlackActionUsingPOSTHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/rest/v1/actions/slack/test"] = response_actions.NewTestSlackActionUsingPOST1(o.context, o.ResponseActionsTestSlackActionUsingPOST1Handler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/rest/v1/azure/connectors/{connectorId}"] = azure_connector.NewUpdateConnectorUsingPUT(o.context, o.AzureConnectorUpdateConnectorUsingPUTHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/rest/v1/aws/connectors/{connectorId}"] = a_w_s_connector.NewUpdateConnectorUsingPUT1(o.context, o.AwsConnectorUpdateConnectorUsingPUT1Handler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/rest/v1/gcp/connectors/{connectorId}"] = g_c_p_connector.NewUpdateConnectorUsingPUT2(o.context, o.GcpConnectorUpdateConnectorUsingPUT2Handler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/rest/v1/actions/email/{emailActionId}"] = response_actions.NewUpdateEmailActionUsingPUT(o.context, o.ResponseActionsUpdateEmailActionUsingPUTHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/rest/v1/users/{userName}/groupScope"] = user_access_management.NewUpdateGroupScopeForUserUsingPOST(o.context, o.UserAccessManagementUpdateGroupScopeForUserUsingPOSTHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/rest/v1/groups/connectors"] = connector_groups_management.NewUpdateGroupUsingPOST(o.context, o.ConnectorGroupsManagementUpdateGroupUsingPOSTHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/rest/v1/actions/pagerduty/{pagerActionId}"] = response_actions.NewUpdatePagerActionUsingPUT(o.context, o.ResponseActionsUpdatePagerActionUsingPUTHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/rest/v1/rules/{ruleId}"] = response_rules.NewUpdateRuleUsingPUT(o.context, o.ResponseRulesUpdateRuleUsingPUTHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/rest/v1/users/{userName}/scope"] = user_access_management.NewUpdateScopeForUserUsingPOST(o.context, o.UserAccessManagementUpdateScopeForUserUsingPOSTHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/rest/v1/actions/slack/{slackActionId}"] = response_actions.NewUpdateSlackActionUsingPUT(o.context, o.ResponseActionsUpdateSlackActionUsingPUTHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/rest/v1/reports/{reportId}"] = reports.NewUpdateUsingPATCH(o.context, o.ReportsUpdateUsingPATCHHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *CloudViewAPIsAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *CloudViewAPIsAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *CloudViewAPIsAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *CloudViewAPIsAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *CloudViewAPIsAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
