/* #nosec */ // Code generated by go-swagger; DO NOT EDIT.

package reports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetDataUsingGETHandlerFunc turns a function with the right signature into a get data using g e t handler
type GetDataUsingGETHandlerFunc func(GetDataUsingGETParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDataUsingGETHandlerFunc) Handle(params GetDataUsingGETParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetDataUsingGETHandler interface for that can handle valid get data using g e t params
type GetDataUsingGETHandler interface {
	Handle(GetDataUsingGETParams, interface{}) middleware.Responder
}

// NewGetDataUsingGET creates a new http.Handler for the get data using g e t operation
func NewGetDataUsingGET(ctx *middleware.Context, handler GetDataUsingGETHandler) *GetDataUsingGET {
	return &GetDataUsingGET{Context: ctx, Handler: handler}
}

/*GetDataUsingGET swagger:route GET /rest/v1/reports/report_data/{reportId} Reports getDataUsingGET

Get the complete data of the specified report

*/
type GetDataUsingGET struct {
	Context *middleware.Context
	Handler GetDataUsingGETHandler
}

func (o *GetDataUsingGET) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetDataUsingGETParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
