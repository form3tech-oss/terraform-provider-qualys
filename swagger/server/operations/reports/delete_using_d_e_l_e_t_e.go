/* #nosec */ // Code generated by go-swagger; DO NOT EDIT.

package reports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteUsingDELETEHandlerFunc turns a function with the right signature into a delete using d e l e t e handler
type DeleteUsingDELETEHandlerFunc func(DeleteUsingDELETEParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteUsingDELETEHandlerFunc) Handle(params DeleteUsingDELETEParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// DeleteUsingDELETEHandler interface for that can handle valid delete using d e l e t e params
type DeleteUsingDELETEHandler interface {
	Handle(DeleteUsingDELETEParams, interface{}) middleware.Responder
}

// NewDeleteUsingDELETE creates a new http.Handler for the delete using d e l e t e operation
func NewDeleteUsingDELETE(ctx *middleware.Context, handler DeleteUsingDELETEHandler) *DeleteUsingDELETE {
	return &DeleteUsingDELETE{Context: ctx, Handler: handler}
}

/*DeleteUsingDELETE swagger:route DELETE /rest/v1/reports Reports deleteUsingDELETE

Delete the provided report configs

*/
type DeleteUsingDELETE struct {
	Context *middleware.Context
	Handler DeleteUsingDELETEHandler
}

func (o *DeleteUsingDELETE) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteUsingDELETEParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
