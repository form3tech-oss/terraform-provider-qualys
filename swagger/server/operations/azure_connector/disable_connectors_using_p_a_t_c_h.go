/* #nosec */ // Code generated by go-swagger; DO NOT EDIT.

package azure_connector

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DisableConnectorsUsingPATCHHandlerFunc turns a function with the right signature into a disable connectors using p a t c h handler
type DisableConnectorsUsingPATCHHandlerFunc func(DisableConnectorsUsingPATCHParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn DisableConnectorsUsingPATCHHandlerFunc) Handle(params DisableConnectorsUsingPATCHParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// DisableConnectorsUsingPATCHHandler interface for that can handle valid disable connectors using p a t c h params
type DisableConnectorsUsingPATCHHandler interface {
	Handle(DisableConnectorsUsingPATCHParams, interface{}) middleware.Responder
}

// NewDisableConnectorsUsingPATCH creates a new http.Handler for the disable connectors using p a t c h operation
func NewDisableConnectorsUsingPATCH(ctx *middleware.Context, handler DisableConnectorsUsingPATCHHandler) *DisableConnectorsUsingPATCH {
	return &DisableConnectorsUsingPATCH{Context: ctx, Handler: handler}
}

/*DisableConnectorsUsingPATCH swagger:route PATCH /rest/v1/azure/connectors/connectors/disable Azure Connector disableConnectorsUsingPATCH

Disable the provided connectors

*/
type DisableConnectorsUsingPATCH struct {
	Context *middleware.Context
	Handler DisableConnectorsUsingPATCHHandler
}

func (o *DisableConnectorsUsingPATCH) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDisableConnectorsUsingPATCHParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
