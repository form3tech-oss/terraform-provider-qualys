/* #nosec */ // Code generated by go-swagger; DO NOT EDIT.

package response_actions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateSlackActionUsingPUTHandlerFunc turns a function with the right signature into a update slack action using p u t handler
type UpdateSlackActionUsingPUTHandlerFunc func(UpdateSlackActionUsingPUTParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateSlackActionUsingPUTHandlerFunc) Handle(params UpdateSlackActionUsingPUTParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// UpdateSlackActionUsingPUTHandler interface for that can handle valid update slack action using p u t params
type UpdateSlackActionUsingPUTHandler interface {
	Handle(UpdateSlackActionUsingPUTParams, interface{}) middleware.Responder
}

// NewUpdateSlackActionUsingPUT creates a new http.Handler for the update slack action using p u t operation
func NewUpdateSlackActionUsingPUT(ctx *middleware.Context, handler UpdateSlackActionUsingPUTHandler) *UpdateSlackActionUsingPUT {
	return &UpdateSlackActionUsingPUT{Context: ctx, Handler: handler}
}

/*UpdateSlackActionUsingPUT swagger:route PUT /rest/v1/actions/slack/{slackActionId} Response Actions updateSlackActionUsingPUT

Update Slack action

*/
type UpdateSlackActionUsingPUT struct {
	Context *middleware.Context
	Handler UpdateSlackActionUsingPUTHandler
}

func (o *UpdateSlackActionUsingPUT) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateSlackActionUsingPUTParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
