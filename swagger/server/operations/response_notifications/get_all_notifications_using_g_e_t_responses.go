/* #nosec */ // Code generated by go-swagger; DO NOT EDIT.

package response_notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/form3tech-oss/terraform-provider-qualys/swagger/models"
)

// GetAllNotificationsUsingGETOKCode is the HTTP code returned for type GetAllNotificationsUsingGETOK
const GetAllNotificationsUsingGETOKCode int = 200

/*GetAllNotificationsUsingGETOK OK

swagger:response getAllNotificationsUsingGETOK
*/
type GetAllNotificationsUsingGETOK struct {

	/*
	  In: Body
	*/
	Payload []*models.AlertResponse `json:"body,omitempty"`
}

// NewGetAllNotificationsUsingGETOK creates GetAllNotificationsUsingGETOK with default headers values
func NewGetAllNotificationsUsingGETOK() *GetAllNotificationsUsingGETOK {

	return &GetAllNotificationsUsingGETOK{}
}

// WithPayload adds the payload to the get all notifications using g e t o k response
func (o *GetAllNotificationsUsingGETOK) WithPayload(payload []*models.AlertResponse) *GetAllNotificationsUsingGETOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get all notifications using g e t o k response
func (o *GetAllNotificationsUsingGETOK) SetPayload(payload []*models.AlertResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAllNotificationsUsingGETOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.AlertResponse, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetAllNotificationsUsingGETBadRequestCode is the HTTP code returned for type GetAllNotificationsUsingGETBadRequest
const GetAllNotificationsUsingGETBadRequestCode int = 400

/*GetAllNotificationsUsingGETBadRequest Bad Request

swagger:response getAllNotificationsUsingGETBadRequest
*/
type GetAllNotificationsUsingGETBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.APIErrorFacade `json:"body,omitempty"`
}

// NewGetAllNotificationsUsingGETBadRequest creates GetAllNotificationsUsingGETBadRequest with default headers values
func NewGetAllNotificationsUsingGETBadRequest() *GetAllNotificationsUsingGETBadRequest {

	return &GetAllNotificationsUsingGETBadRequest{}
}

// WithPayload adds the payload to the get all notifications using g e t bad request response
func (o *GetAllNotificationsUsingGETBadRequest) WithPayload(payload *models.APIErrorFacade) *GetAllNotificationsUsingGETBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get all notifications using g e t bad request response
func (o *GetAllNotificationsUsingGETBadRequest) SetPayload(payload *models.APIErrorFacade) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAllNotificationsUsingGETBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAllNotificationsUsingGETUnauthorizedCode is the HTTP code returned for type GetAllNotificationsUsingGETUnauthorized
const GetAllNotificationsUsingGETUnauthorizedCode int = 401

/*GetAllNotificationsUsingGETUnauthorized Unauthorized user

swagger:response getAllNotificationsUsingGETUnauthorized
*/
type GetAllNotificationsUsingGETUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.APIErrorFacade `json:"body,omitempty"`
}

// NewGetAllNotificationsUsingGETUnauthorized creates GetAllNotificationsUsingGETUnauthorized with default headers values
func NewGetAllNotificationsUsingGETUnauthorized() *GetAllNotificationsUsingGETUnauthorized {

	return &GetAllNotificationsUsingGETUnauthorized{}
}

// WithPayload adds the payload to the get all notifications using g e t unauthorized response
func (o *GetAllNotificationsUsingGETUnauthorized) WithPayload(payload *models.APIErrorFacade) *GetAllNotificationsUsingGETUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get all notifications using g e t unauthorized response
func (o *GetAllNotificationsUsingGETUnauthorized) SetPayload(payload *models.APIErrorFacade) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAllNotificationsUsingGETUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAllNotificationsUsingGETForbiddenCode is the HTTP code returned for type GetAllNotificationsUsingGETForbidden
const GetAllNotificationsUsingGETForbiddenCode int = 403

/*GetAllNotificationsUsingGETForbidden Forbidden

swagger:response getAllNotificationsUsingGETForbidden
*/
type GetAllNotificationsUsingGETForbidden struct {
}

// NewGetAllNotificationsUsingGETForbidden creates GetAllNotificationsUsingGETForbidden with default headers values
func NewGetAllNotificationsUsingGETForbidden() *GetAllNotificationsUsingGETForbidden {

	return &GetAllNotificationsUsingGETForbidden{}
}

// WriteResponse to the client
func (o *GetAllNotificationsUsingGETForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(403)
}

// GetAllNotificationsUsingGETNotFoundCode is the HTTP code returned for type GetAllNotificationsUsingGETNotFound
const GetAllNotificationsUsingGETNotFoundCode int = 404

/*GetAllNotificationsUsingGETNotFound Not Found

swagger:response getAllNotificationsUsingGETNotFound
*/
type GetAllNotificationsUsingGETNotFound struct {
}

// NewGetAllNotificationsUsingGETNotFound creates GetAllNotificationsUsingGETNotFound with default headers values
func NewGetAllNotificationsUsingGETNotFound() *GetAllNotificationsUsingGETNotFound {

	return &GetAllNotificationsUsingGETNotFound{}
}

// WriteResponse to the client
func (o *GetAllNotificationsUsingGETNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}
