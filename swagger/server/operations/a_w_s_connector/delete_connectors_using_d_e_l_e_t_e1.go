/* #nosec */ // Code generated by go-swagger; DO NOT EDIT.

package a_w_s_connector

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteConnectorsUsingDELETE1HandlerFunc turns a function with the right signature into a delete connectors using d e l e t e 1 handler
type DeleteConnectorsUsingDELETE1HandlerFunc func(DeleteConnectorsUsingDELETE1Params, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteConnectorsUsingDELETE1HandlerFunc) Handle(params DeleteConnectorsUsingDELETE1Params, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// DeleteConnectorsUsingDELETE1Handler interface for that can handle valid delete connectors using d e l e t e 1 params
type DeleteConnectorsUsingDELETE1Handler interface {
	Handle(DeleteConnectorsUsingDELETE1Params, interface{}) middleware.Responder
}

// NewDeleteConnectorsUsingDELETE1 creates a new http.Handler for the delete connectors using d e l e t e 1 operation
func NewDeleteConnectorsUsingDELETE1(ctx *middleware.Context, handler DeleteConnectorsUsingDELETE1Handler) *DeleteConnectorsUsingDELETE1 {
	return &DeleteConnectorsUsingDELETE1{Context: ctx, Handler: handler}
}

/*DeleteConnectorsUsingDELETE1 swagger:route DELETE /rest/v1/aws/connectors AWS Connector deleteConnectorsUsingDELETE1

Delete the provided connectors

*/
type DeleteConnectorsUsingDELETE1 struct {
	Context *middleware.Context
	Handler DeleteConnectorsUsingDELETE1Handler
}

func (o *DeleteConnectorsUsingDELETE1) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteConnectorsUsingDELETE1Params()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
