/* #nosec */ // Code generated by go-swagger; DO NOT EDIT.

package a_w_s_connector

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DisableConnectorsUsingPATCH1HandlerFunc turns a function with the right signature into a disable connectors using p a t c h 1 handler
type DisableConnectorsUsingPATCH1HandlerFunc func(DisableConnectorsUsingPATCH1Params, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn DisableConnectorsUsingPATCH1HandlerFunc) Handle(params DisableConnectorsUsingPATCH1Params, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// DisableConnectorsUsingPATCH1Handler interface for that can handle valid disable connectors using p a t c h 1 params
type DisableConnectorsUsingPATCH1Handler interface {
	Handle(DisableConnectorsUsingPATCH1Params, interface{}) middleware.Responder
}

// NewDisableConnectorsUsingPATCH1 creates a new http.Handler for the disable connectors using p a t c h 1 operation
func NewDisableConnectorsUsingPATCH1(ctx *middleware.Context, handler DisableConnectorsUsingPATCH1Handler) *DisableConnectorsUsingPATCH1 {
	return &DisableConnectorsUsingPATCH1{Context: ctx, Handler: handler}
}

/*DisableConnectorsUsingPATCH1 swagger:route PATCH /rest/v1/aws/connectors/connectors/disable AWS Connector disableConnectorsUsingPATCH1

Disable the provided connectors

*/
type DisableConnectorsUsingPATCH1 struct {
	Context *middleware.Context
	Handler DisableConnectorsUsingPATCH1Handler
}

func (o *DisableConnectorsUsingPATCH1) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDisableConnectorsUsingPATCH1Params()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
