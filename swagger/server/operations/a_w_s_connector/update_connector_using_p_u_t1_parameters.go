/* #nosec */ // Code generated by go-swagger; DO NOT EDIT.

package a_w_s_connector

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"

	"github.com/form3tech-oss/terraform-provider-qualys/swagger/models"
)

// NewUpdateConnectorUsingPUT1Params creates a new UpdateConnectorUsingPUT1Params object
// no default values defined in spec.
func NewUpdateConnectorUsingPUT1Params() UpdateConnectorUsingPUT1Params {

	return UpdateConnectorUsingPUT1Params{}
}

// UpdateConnectorUsingPUT1Params contains all the bound params for the update connector using p u t 1 operation
// typically these are obtained from a http.Request
//
// swagger:parameters updateConnectorUsingPUT_1
type UpdateConnectorUsingPUT1Params struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*<a href="/cloudview/help/index.htm#t=connector%2Faws_v1%2Fconfigure_aws_connectors.htm" target="_blank">Click here</a> to know more about parameters.
	  Required: true
	  In: body
	*/
	ConnectorBody *models.ConnectorUpdateRequest
	/*Specify the connector ID of a specific connector in the userâ€™s scope.
	  Required: true
	  In: path
	*/
	ConnectorID string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewUpdateConnectorUsingPUT1Params() beforehand.
func (o *UpdateConnectorUsingPUT1Params) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body models.ConnectorUpdateRequest
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("connectorBody", "body", ""))
			} else {
				res = append(res, errors.NewParseError("connectorBody", "body", "", err))
			}
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.ConnectorBody = &body
			}
		}
	} else {
		res = append(res, errors.Required("connectorBody", "body", ""))
	}
	rConnectorID, rhkConnectorID, _ := route.Params.GetOK("connectorId")
	if err := o.bindConnectorID(rConnectorID, rhkConnectorID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindConnectorID binds and validates parameter ConnectorID from path.
func (o *UpdateConnectorUsingPUT1Params) bindConnectorID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.ConnectorID = raw

	return nil
}
