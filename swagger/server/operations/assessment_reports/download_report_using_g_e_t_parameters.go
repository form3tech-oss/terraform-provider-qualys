/* #nosec */ // Code generated by go-swagger; DO NOT EDIT.

package assessment_reports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewDownloadReportUsingGETParams creates a new DownloadReportUsingGETParams object
// no default values defined in spec.
func NewDownloadReportUsingGETParams() DownloadReportUsingGETParams {

	return DownloadReportUsingGETParams{}
}

// DownloadReportUsingGETParams contains all the bound params for the download report using g e t operation
// typically these are obtained from a http.Request
//
// swagger:parameters downloadReportUsingGET
type DownloadReportUsingGETParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Report Format
	  Required: true
	  In: query
	*/
	ReportFormat string
	/*The report Id
	  Required: true
	  In: path
	*/
	ReportID string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewDownloadReportUsingGETParams() beforehand.
func (o *DownloadReportUsingGETParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qReportFormat, qhkReportFormat, _ := qs.GetOK("reportFormat")
	if err := o.bindReportFormat(qReportFormat, qhkReportFormat, route.Formats); err != nil {
		res = append(res, err)
	}

	rReportID, rhkReportID, _ := route.Params.GetOK("reportId")
	if err := o.bindReportID(rReportID, rhkReportID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindReportFormat binds and validates parameter ReportFormat from query.
func (o *DownloadReportUsingGETParams) bindReportFormat(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("reportFormat", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("reportFormat", "query", raw); err != nil {
		return err
	}

	o.ReportFormat = raw

	if err := o.validateReportFormat(formats); err != nil {
		return err
	}

	return nil
}

// validateReportFormat carries on validations for parameter ReportFormat
func (o *DownloadReportUsingGETParams) validateReportFormat(formats strfmt.Registry) error {

	if err := validate.EnumCase("reportFormat", "query", o.ReportFormat, []interface{}{"csv", "pdf"}, true); err != nil {
		return err
	}

	return nil
}

// bindReportID binds and validates parameter ReportID from path.
func (o *DownloadReportUsingGETParams) bindReportID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.ReportID = raw

	return nil
}
