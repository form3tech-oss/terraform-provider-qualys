/* #nosec */ // Code generated by go-swagger; DO NOT EDIT.

package assessment_reports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetListUsingGET4Params creates a new GetListUsingGET4Params object
// with the default values initialized.
func NewGetListUsingGET4Params() GetListUsingGET4Params {

	var (
		// initialize parameters with default values

		pageNoDefault   = int32(0)
		pageSizeDefault = int32(50)
	)

	return GetListUsingGET4Params{
		PageNo: pageNoDefault,

		PageSize: pageSizeDefault,
	}
}

// GetListUsingGET4Params contains all the bound params for the get list using g e t 4 operation
// typically these are obtained from a http.Request
//
// swagger:parameters getListUsingGET_4
type GetListUsingGET4Params struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Created By filter
	  In: query
	*/
	CreatedBy *string
	/*The page to be returned.
	  Required: true
	  In: query
	  Default: 0
	*/
	PageNo int32
	/*The number of records per page to be included in the response.
	  Required: true
	  In: query
	  Default: 50
	*/
	PageSize int32
	/*Report Name filter
	  In: query
	*/
	ReportName *string
	/*Sort By filter can be used from (createdOn, status, reportName)
	  In: query
	*/
	SortBy *string
	/*Report Status filter
	  In: query
	*/
	Status *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetListUsingGET4Params() beforehand.
func (o *GetListUsingGET4Params) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qCreatedBy, qhkCreatedBy, _ := qs.GetOK("createdBy")
	if err := o.bindCreatedBy(qCreatedBy, qhkCreatedBy, route.Formats); err != nil {
		res = append(res, err)
	}

	qPageNo, qhkPageNo, _ := qs.GetOK("pageNo")
	if err := o.bindPageNo(qPageNo, qhkPageNo, route.Formats); err != nil {
		res = append(res, err)
	}

	qPageSize, qhkPageSize, _ := qs.GetOK("pageSize")
	if err := o.bindPageSize(qPageSize, qhkPageSize, route.Formats); err != nil {
		res = append(res, err)
	}

	qReportName, qhkReportName, _ := qs.GetOK("reportName")
	if err := o.bindReportName(qReportName, qhkReportName, route.Formats); err != nil {
		res = append(res, err)
	}

	qSortBy, qhkSortBy, _ := qs.GetOK("sortBy")
	if err := o.bindSortBy(qSortBy, qhkSortBy, route.Formats); err != nil {
		res = append(res, err)
	}

	qStatus, qhkStatus, _ := qs.GetOK("status")
	if err := o.bindStatus(qStatus, qhkStatus, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCreatedBy binds and validates parameter CreatedBy from query.
func (o *GetListUsingGET4Params) bindCreatedBy(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.CreatedBy = &raw

	return nil
}

// bindPageNo binds and validates parameter PageNo from query.
func (o *GetListUsingGET4Params) bindPageNo(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("pageNo", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("pageNo", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("pageNo", "query", "int32", raw)
	}
	o.PageNo = value

	return nil
}

// bindPageSize binds and validates parameter PageSize from query.
func (o *GetListUsingGET4Params) bindPageSize(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("pageSize", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("pageSize", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("pageSize", "query", "int32", raw)
	}
	o.PageSize = value

	return nil
}

// bindReportName binds and validates parameter ReportName from query.
func (o *GetListUsingGET4Params) bindReportName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.ReportName = &raw

	return nil
}

// bindSortBy binds and validates parameter SortBy from query.
func (o *GetListUsingGET4Params) bindSortBy(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.SortBy = &raw

	return nil
}

// bindStatus binds and validates parameter Status from query.
func (o *GetListUsingGET4Params) bindStatus(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Status = &raw

	return nil
}
