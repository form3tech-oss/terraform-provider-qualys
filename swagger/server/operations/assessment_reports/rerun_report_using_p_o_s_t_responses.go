/* #nosec */ // Code generated by go-swagger; DO NOT EDIT.

package assessment_reports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/form3tech-oss/terraform-provider-qualys/swagger/models"
)

// RerunReportUsingPOSTOKCode is the HTTP code returned for type RerunReportUsingPOSTOK
const RerunReportUsingPOSTOKCode int = 200

/*RerunReportUsingPOSTOK OK

swagger:response rerunReportUsingPOSTOK
*/
type RerunReportUsingPOSTOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewRerunReportUsingPOSTOK creates RerunReportUsingPOSTOK with default headers values
func NewRerunReportUsingPOSTOK() *RerunReportUsingPOSTOK {

	return &RerunReportUsingPOSTOK{}
}

// WithPayload adds the payload to the rerun report using p o s t o k response
func (o *RerunReportUsingPOSTOK) WithPayload(payload string) *RerunReportUsingPOSTOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the rerun report using p o s t o k response
func (o *RerunReportUsingPOSTOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RerunReportUsingPOSTOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// RerunReportUsingPOSTCreatedCode is the HTTP code returned for type RerunReportUsingPOSTCreated
const RerunReportUsingPOSTCreatedCode int = 201

/*RerunReportUsingPOSTCreated Created

swagger:response rerunReportUsingPOSTCreated
*/
type RerunReportUsingPOSTCreated struct {
}

// NewRerunReportUsingPOSTCreated creates RerunReportUsingPOSTCreated with default headers values
func NewRerunReportUsingPOSTCreated() *RerunReportUsingPOSTCreated {

	return &RerunReportUsingPOSTCreated{}
}

// WriteResponse to the client
func (o *RerunReportUsingPOSTCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// RerunReportUsingPOSTBadRequestCode is the HTTP code returned for type RerunReportUsingPOSTBadRequest
const RerunReportUsingPOSTBadRequestCode int = 400

/*RerunReportUsingPOSTBadRequest Bad Request

swagger:response rerunReportUsingPOSTBadRequest
*/
type RerunReportUsingPOSTBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.APIErrorFacade `json:"body,omitempty"`
}

// NewRerunReportUsingPOSTBadRequest creates RerunReportUsingPOSTBadRequest with default headers values
func NewRerunReportUsingPOSTBadRequest() *RerunReportUsingPOSTBadRequest {

	return &RerunReportUsingPOSTBadRequest{}
}

// WithPayload adds the payload to the rerun report using p o s t bad request response
func (o *RerunReportUsingPOSTBadRequest) WithPayload(payload *models.APIErrorFacade) *RerunReportUsingPOSTBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the rerun report using p o s t bad request response
func (o *RerunReportUsingPOSTBadRequest) SetPayload(payload *models.APIErrorFacade) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RerunReportUsingPOSTBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RerunReportUsingPOSTUnauthorizedCode is the HTTP code returned for type RerunReportUsingPOSTUnauthorized
const RerunReportUsingPOSTUnauthorizedCode int = 401

/*RerunReportUsingPOSTUnauthorized Unauthorized user

swagger:response rerunReportUsingPOSTUnauthorized
*/
type RerunReportUsingPOSTUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.APIErrorFacade `json:"body,omitempty"`
}

// NewRerunReportUsingPOSTUnauthorized creates RerunReportUsingPOSTUnauthorized with default headers values
func NewRerunReportUsingPOSTUnauthorized() *RerunReportUsingPOSTUnauthorized {

	return &RerunReportUsingPOSTUnauthorized{}
}

// WithPayload adds the payload to the rerun report using p o s t unauthorized response
func (o *RerunReportUsingPOSTUnauthorized) WithPayload(payload *models.APIErrorFacade) *RerunReportUsingPOSTUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the rerun report using p o s t unauthorized response
func (o *RerunReportUsingPOSTUnauthorized) SetPayload(payload *models.APIErrorFacade) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RerunReportUsingPOSTUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RerunReportUsingPOSTForbiddenCode is the HTTP code returned for type RerunReportUsingPOSTForbidden
const RerunReportUsingPOSTForbiddenCode int = 403

/*RerunReportUsingPOSTForbidden Forbidden

swagger:response rerunReportUsingPOSTForbidden
*/
type RerunReportUsingPOSTForbidden struct {
}

// NewRerunReportUsingPOSTForbidden creates RerunReportUsingPOSTForbidden with default headers values
func NewRerunReportUsingPOSTForbidden() *RerunReportUsingPOSTForbidden {

	return &RerunReportUsingPOSTForbidden{}
}

// WriteResponse to the client
func (o *RerunReportUsingPOSTForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(403)
}

// RerunReportUsingPOSTNotFoundCode is the HTTP code returned for type RerunReportUsingPOSTNotFound
const RerunReportUsingPOSTNotFoundCode int = 404

/*RerunReportUsingPOSTNotFound Not Found

swagger:response rerunReportUsingPOSTNotFound
*/
type RerunReportUsingPOSTNotFound struct {
}

// NewRerunReportUsingPOSTNotFound creates RerunReportUsingPOSTNotFound with default headers values
func NewRerunReportUsingPOSTNotFound() *RerunReportUsingPOSTNotFound {

	return &RerunReportUsingPOSTNotFound{}
}

// WriteResponse to the client
func (o *RerunReportUsingPOSTNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}
