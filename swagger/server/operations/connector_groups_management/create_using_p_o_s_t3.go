/* #nosec */ // Code generated by go-swagger; DO NOT EDIT.

package connector_groups_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateUsingPOST3HandlerFunc turns a function with the right signature into a create using p o s t 3 handler
type CreateUsingPOST3HandlerFunc func(CreateUsingPOST3Params, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateUsingPOST3HandlerFunc) Handle(params CreateUsingPOST3Params, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// CreateUsingPOST3Handler interface for that can handle valid create using p o s t 3 params
type CreateUsingPOST3Handler interface {
	Handle(CreateUsingPOST3Params, interface{}) middleware.Responder
}

// NewCreateUsingPOST3 creates a new http.Handler for the create using p o s t 3 operation
func NewCreateUsingPOST3(ctx *middleware.Context, handler CreateUsingPOST3Handler) *CreateUsingPOST3 {
	return &CreateUsingPOST3{Context: ctx, Handler: handler}
}

/*CreateUsingPOST3 swagger:route POST /rest/v1/groups Connector Groups Management createUsingPOST3

Create a new Group

*/
type CreateUsingPOST3 struct {
	Context *middleware.Context
	Handler CreateUsingPOST3Handler
}

func (o *CreateUsingPOST3) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateUsingPOST3Params()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
