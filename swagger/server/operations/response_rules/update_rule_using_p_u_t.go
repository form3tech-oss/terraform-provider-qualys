/* #nosec */ // Code generated by go-swagger; DO NOT EDIT.

package response_rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateRuleUsingPUTHandlerFunc turns a function with the right signature into a update rule using p u t handler
type UpdateRuleUsingPUTHandlerFunc func(UpdateRuleUsingPUTParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateRuleUsingPUTHandlerFunc) Handle(params UpdateRuleUsingPUTParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// UpdateRuleUsingPUTHandler interface for that can handle valid update rule using p u t params
type UpdateRuleUsingPUTHandler interface {
	Handle(UpdateRuleUsingPUTParams, interface{}) middleware.Responder
}

// NewUpdateRuleUsingPUT creates a new http.Handler for the update rule using p u t operation
func NewUpdateRuleUsingPUT(ctx *middleware.Context, handler UpdateRuleUsingPUTHandler) *UpdateRuleUsingPUT {
	return &UpdateRuleUsingPUT{Context: ctx, Handler: handler}
}

/*UpdateRuleUsingPUT swagger:route PUT /rest/v1/rules/{ruleId} Response Rules updateRuleUsingPUT

Update an existing rule

*/
type UpdateRuleUsingPUT struct {
	Context *middleware.Context
	Handler UpdateRuleUsingPUTHandler
}

func (o *UpdateRuleUsingPUT) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateRuleUsingPUTParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
