/* #nosec */ // Code generated by go-swagger; DO NOT EDIT.

package response_rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"

	"github.com/form3tech-oss/terraform-provider-qualys/swagger/models"
)

// NewUpdateRuleUsingPUTParams creates a new UpdateRuleUsingPUTParams object
// no default values defined in spec.
func NewUpdateRuleUsingPUTParams() UpdateRuleUsingPUTParams {

	return UpdateRuleUsingPUTParams{}
}

// UpdateRuleUsingPUTParams contains all the bound params for the update rule using p u t operation
// typically these are obtained from a http.Request
//
// swagger:parameters updateRuleUsingPUT
type UpdateRuleUsingPUTParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Specify the rule ID of a specific rule in the userâ€™s scope.
	  Required: true
	  In: path
	*/
	RuleID string
	/*Rule Type
	  Required: true
	  In: query
	*/
	RuleType string
	/*ruleUpdateRequest
	  Required: true
	  In: body
	*/
	RuleUpdateRequest *models.RuleUpdateRequest
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewUpdateRuleUsingPUTParams() beforehand.
func (o *UpdateRuleUsingPUTParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rRuleID, rhkRuleID, _ := route.Params.GetOK("ruleId")
	if err := o.bindRuleID(rRuleID, rhkRuleID, route.Formats); err != nil {
		res = append(res, err)
	}

	qRuleType, qhkRuleType, _ := qs.GetOK("ruleType")
	if err := o.bindRuleType(qRuleType, qhkRuleType, route.Formats); err != nil {
		res = append(res, err)
	}

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body models.RuleUpdateRequest
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("ruleUpdateRequest", "body", ""))
			} else {
				res = append(res, errors.NewParseError("ruleUpdateRequest", "body", "", err))
			}
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.RuleUpdateRequest = &body
			}
		}
	} else {
		res = append(res, errors.Required("ruleUpdateRequest", "body", ""))
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindRuleID binds and validates parameter RuleID from path.
func (o *UpdateRuleUsingPUTParams) bindRuleID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.RuleID = raw

	return nil
}

// bindRuleType binds and validates parameter RuleType from query.
func (o *UpdateRuleUsingPUTParams) bindRuleType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("ruleType", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("ruleType", "query", raw); err != nil {
		return err
	}

	o.RuleType = raw

	if err := o.validateRuleType(formats); err != nil {
		return err
	}

	return nil
}

// validateRuleType carries on validations for parameter RuleType
func (o *UpdateRuleUsingPUTParams) validateRuleType(formats strfmt.Registry) error {

	if err := validate.EnumCase("ruleType", "query", o.RuleType, []interface{}{"simple_alert", "time_window_schedule_alert"}, true); err != nil {
		return err
	}

	return nil
}
